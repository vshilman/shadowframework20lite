package shadow.operational.grid;

/**
 * This class describe a Grid Circle.
 * A Grid Circle is a partition of a Regular Grid of points.
 * Each Regular Grid can be split into more concentric GridCircles,
 * where the first GridCircle is generated by collecting the points
 * in the edges of the Grid, and successive GridCircles are generated
 * by removing the first GridCircle and verifying that the rest
 * of the points forms a smaller Grid. 
 * 
 * A GridCircle can be seen as an 'Empty Regular Grid', because
 * it holds only informations for the edges of the grid.
 * 
 * @author Alessandro Martinelli
 *
 * @param <T>
 */
public class SFGridCircle<T> {

	private int edges;
	private int n;
	private Object[][] values;
	
	/**
	 * Create a grid circle
	 * @param n
	 * @param edges
	 */
	public SFGridCircle(int n,int edges) {
		super();
		this.setN(n);
		this.setEdges(edges);
		
		if(n==1){//1 point grid...
			this.values=new Object[1][1];
		}else{
			this.values=new Object[edges][n];
		}
	}
	
	public int getValuesSize(){
		return values.length;
	}
	
	@SuppressWarnings("unchecked")	
	public T getValue(int edgeIndex,int index) {
		return (T)(values[edgeIndex][index]);
	}
	
	public void setValue(int edgeIndex,int index,T value){
		values[edgeIndex][index]=value;
	}

	public int round(int index){
		int n=getEdges();
		return round(index, n);
	}

	public static int round(int index, int n) {
		while(index>=n)
			index-=n;
		while(index<0)
			index+=n;
		return index;
	}

	public void setN(int n) {
		this.n = n;
	}

	public int getN() {
		return n;
	}

	public void setEdges(int edges) {
		this.edges = edges;
	}

	public int getEdges() {
		return edges;
	}
	
}

[BLOCK [@Override	public void extractIndices(int[][] output,SFArray<SFValuenf> array,			SFValuenf[] data,int offset,int Nu,int Nv,int I,int J) throws SFArrayElementException]] as been translated to [null]
[sentence:int [] tmp_S=output[0]] as been translated to [null]
[sentence:private static float pi2=(float)(2*Math.PI)] as been translated to [null]
[sentence:int v_index=(int)(v*pts.size())] as been translated to [null]
[BLOCK [if(v_index==pts.size())]] as been translated to [null]
[BLOCK [else if(v_index==pts.size()-1)]] as been translated to [null]
[sentence:List<Entry<SFPipelineRegister, SFProgramComponent>> blocks=primitive.getPrimitiveMap()] as been translated to [null]
[BLOCK [for (Entry<SFPipelineRegister, SFProgramComponent> entry : blocks)]] as been translated to [null]
[BLOCK [if(getLastElement()-getFirstElement()!=countElement)]] as been translated to [null]
[sentence:SFValuenf vertices[]=new SFValuenf[((Nv-1)*n1+1)*((Nu-1)*n1+1)]] as been translated to [null]
[sentence:float v=v_splits[I]+(Ires>0?Ires*stepn1*(v_splits[I+1]-v_splits[I]):0)] as been translated to [null]
[sentence:float u=u_splits[J]+(Jres>0?Jres*stepn1*(u_splits[J+1]-u_splits[J]):0)] as been translated to [null]
[sentence:case POSITION: vertices[index]=function.getPosition(u, v)] as been translated to [null]
[sentence:case NORMAL: vertices[index]=function.getNormal(u, v)] as been translated to [null]
[sentence:case DU: vertices[index]=function.getDu(u, v)] as been translated to [null]
[sentence:case DV: vertices[index]=function.getDv(u, v)] as been translated to [null]
[sentence:case TXO: SFVertex3f vertex=function.getPosition(u, v)] as been translated to [null]
[blockDeclaration:250, 62, 46, 111, 242, 125, 54, 23, 		65, 31, 181, 229, 63, 48, 215, 0, 		118, 100, 7, 240, 248, 191, 168, 225, 		150, 180, 49, 146, 106, 111, 152, 57, 		231, 6, 168, 64, 235, 164, 9, 151, 		64, 95, 148, 116, 34, 112, 157, 223, 		146, 112, 238, 251, 86, 17, 41, 18, 		202, 46, 140, 164, 239, 103, 249, 72] as been translated to [null]
[BLOCK [for(int i=0;i<data.length && i<randomImage.length;i++)]] as been translated to [null]
[BLOCK [if(pxLower>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pyLower>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pxUpper>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pyUpper>=BASIC_SIZE)]] as been translated to [null]
[blockDeclaration:250, 62, 46, 111, 242, 125, 54, 23, 		65, 31, 181, 229, 63, 48, 215, 0, 		118, 100, 7, 240, 248, 191, 168, 225, 		150, 180, 49, 146, 106, 111, 152, 57, 		231, 6, 168, 64, 235, 164, 9, 151, 		64, 95, 148, 116, 34, 112, 157, 223, 		146, 112, 238, 251, 86, 17, 41, 18, 		202, 46, 140, 164, 239, 103, 249, 72] as been translated to [null]
[BLOCK [for(int i=0;i<data.length && i<randomImage.length;i++)]] as been translated to [null]
[BLOCK [if(pxLower>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pyLower>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pxUpper>=BASIC_SIZE)]] as been translated to [null]
[BLOCK [if(pyUpper>=BASIC_SIZE)]] as been translated to [null]
[sentence:float cos=(float) (Math.cos(angle))] as been translated to [null]
[sentence:float sin=(float) (Math.sin(angle))] as been translated to [null]
[sentence:n.v[2]=delta * (-m.v[2])] as been translated to [null]
[sentence:return "GLMatrix2f \n " + v[0] + " " + v[1] + " " + v[2] + " \n" + v[2] + " " + v[3]				+ " \n"] as been translated to [null]
[sentence:float x=p.getX(), y=p.getY()] as been translated to [null]
[sentence:float cos=(float)(Math.cos(angle))] as been translated to [null]
[sentence:float sin=(float)(Math.sin(angle))] as been translated to [null]
[sentence:float cos=(float)(Math.cos(angle))] as been translated to [null]
[sentence:float sin=(float)(Math.sin(angle))] as been translated to [null]
[sentence:float cos=(float)(Math.cos(angle))] as been translated to [null]
[sentence:float sin=(float)(Math.sin(angle))] as been translated to [null]
[sentence:return "GLMatrix3f \n " + A+" "+ B+" "+ C+" \n"+								D+" "+ E+" "+ F+" \n"+								G+" "+ H+" "+ I+" \n"] as been translated to [null]
[sentence:float x=(float)p.getX(),y=(float)p.getY(),z=(float)p.getZ()] as been translated to [null]
[sentence:SFMatrix4f n=new SFMatrix4f(				1,0,0,0,				0,1,0,0,				0,0,1,0,				0,0,0,1		)] as been translated to [null]
[BLOCK [public void storeOn1f(float []f)]] as been translated to [null]
[sentence:return "x:"+v[0]+",y:"+v[1]] as been translated to [null]
[BLOCK [public void storeOn2f(float []f)]] as been translated to [null]
[sentence:float lengthRec=1/(float)(Math.sqrt(v[0]*v[0]+v[1]*v[1]))] as been translated to [null]
[sentence:float lengthRec=1/(float)(Math.sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]))] as been translated to [null]
[BLOCK [public void storeOn3f(float []f)]] as been translated to [null]
[sentence:return super.toString()+",z:"+v[2]] as been translated to [null]
[sentence:float lengthRec=1/(float)(Math.sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]+v[3]*v[3]))] as been translated to [null]
[BLOCK [public void storeOn(float []f)]] as been translated to [null]
[sentence:float x1=(float)(v[1]*a.v[2]-v[2]*a.v[1])] as been translated to [null]
[sentence:float y1=(float)(v[2]*a.v[0]-v[0]*a.v[2])] as been translated to [null]
[sentence:float z1=(float)(v[0]*a.v[1]-v[1]*a.v[0])] as been translated to [null]
[BLOCK [if(operatorSymbol.equalsIgnoreCase(":"))]] as been translated to [null]
[BLOCK [if(operatorSymbol.equalsIgnoreCase("°"))]] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[sentence:super(":", 3)] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[sentence:super("°", 2)] as been translated to [null]
[BLOCK [for (Iterator<SFExpressionElement> iterator = list.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:super("Bad SFExpression: "+arg0)] as been translated to [null]
[BLOCK [if(cElements.size()>1)]] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[BLOCK [if(cElements.size()>1)]] as been translated to [null]
[BLOCK [if(!(maxSize==SIZE_ALL) && getElementSize()==maxSize)]] as been translated to [null]
[BLOCK [for (SFExpressionElement expression : list)]] as been translated to [null]
[sentence:throw new SFExpressionException(" Cannot apply "+this.getElement()+" with the following operands: "+s)] as been translated to [null]
[sentence:ArrayList<SFExpressionElement>[] typeElements=new ArrayList[cElements.size()]] as been translated to [null]
[BLOCK [if(element.getType()!=typeElements[index].get(typeElements[index].size()-1).getType())]] as been translated to [null]
[BLOCK [if(elements.size()>1)]] as been translated to [null]
[BLOCK [if(tmp.getType()!=cElements.getLast().getType())]] as been translated to [null]
[BLOCK [while(i<consecutives.size() && !foundConsecutive)]] as been translated to [null]
[BLOCK [if(tmpPrev.getType()==tps[0] && tmp.getType()==tps[1])]] as been translated to [null]
[sentence:getElement()+tmp.getElement()+"("+tmp.getType()+")")] as been translated to [null]
[BLOCK [private String operatorsSum="#°:		public SFExpressionGeneratori getGenerator()]] as been translated to [null]
[sentence:ArrayList<ArrayList<SFExpressionOperator>> storedExpressiond=new ArrayList<ArrayList<SFExpressionOperator>>()] as been translated to [null]
[sentence:System.out.print(")")] as been translated to [null]
[sentence:System.out.print("("+element.getElement()+"T"+element.getType()+",")] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[BLOCK [if(cElements.size()>1)]] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[sentence:super("%", 2)] as been translated to [null]
[BLOCK [for (Iterator<SFParameteri> iterator = set.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:private static ArrayList<Short[]> consecutives=new ArrayList<Short[]>()] as been translated to [null]
[BLOCK [if(cElements.size()>1)]] as been translated to [null]
[sentence:case 1: this.setType(SFParameteri.GLOBAL_FLOAT)] as been translated to [null]
[sentence:case 2: this.setType(SFParameteri.GLOBAL_FLOAT2)] as been translated to [null]
[sentence:case 3: this.setType(SFParameteri.GLOBAL_FLOAT3)] as been translated to [null]
[sentence:default: this.setType(SFParameteri.GLOBAL_FLOAT4)] as been translated to [null]
[sentence:private static HashMap<String, Class> typeMap=new HashMap<String, Class>()] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,StringTokenizer tokenizer,			int codeLine) throws SFException]] as been translated to [null]
[sentence:"not finished. use end command please :"+tokenizer.nextToken())] as been translated to [null]
[sentence:throw new SFException("("+codeLine+"):Begin Called with an undefined type ("+type+") only primitive," +						"tesselator,transforms,material and lightstep are allowed")] as been translated to [null]
[sentence:throw new SFException("("+codeLine+"): Begin Command not well formed, a correct type and a name are required")] as been translated to [null]
[sentence:throw new SFException("("+codeLine+"): Begin Command not well formed, a correct type and a name are required")] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer tokenizer, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[sentence:private static HashMap<String, Short> types = new HashMap<String, Short>()] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine) throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[sentence:private static HashMap<String, Short> types = new HashMap<String, Short>()] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine) throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer lineToken, int codeLine)			throws SFException]] as been translated to [null]
[BLOCK [@Override	public SFParsableElement parseLine(SFParsableElement component,			StringTokenizer tokenizer, int codeLine)			throws SFException]] as been translated to [null]
[sentence:private static HashMap<String,Short> verticesLoading=new HashMap<String,Short>()] as been translated to [null]
[sentence:private static ArrayList<ArrayList<Short>> edgesLoading=new ArrayList<ArrayList<Short>>()] as been translated to [null]
[sentence:private static ArrayList<ArrayList<Short>> pathsLoading=new ArrayList<ArrayList<Short>>()] as been translated to [null]
[BLOCK [if(verticesLoading.get(vertex)==null)]] as been translated to [null]
[BLOCK [for (Iterator<String> iterator = vertex.iterator();iterator.hasNext();)]] as been translated to [null]
[BLOCK [for (Iterator<String> iterator = vertex.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:names=new String[verticesLoading.size()]] as been translated to [null]
[BLOCK [for (Iterator<String> iterator = ns.iterator();iterator.hasNext();j++)]] as been translated to [null]
[sentence:corners=new short[cornersLoading.size()]] as been translated to [null]
[sentence:edges=new short[edgesLoading.size()][]] as been translated to [null]
[sentence:paths=new short[pathsLoading.size()][]] as been translated to [null]
[sentence:case GLOBAL_FLOAT: return new SFValue1f(0)] as been translated to [null]
[sentence:case GLOBAL_FLOAT2: return new SFVertex2f(0,0)] as been translated to [null]
[sentence:case GLOBAL_FLOAT3: return new SFVertex3f(0,0,0)] as been translated to [null]
[sentence:case GLOBAL_FLOAT4: return new SFVertex4f(0,0,0,0)] as been translated to [null]
[sentence:case GLOBAL_MATRIX2: return SFMatrix2f.getIdentity()] as been translated to [null]
[sentence:case GLOBAL_MATRIX3: return SFMatrix3f.getIdentity()] as been translated to [null]
[sentence:case GLOBAL_MATRIX4: return SFMatrix4f.getIdentity()] as been translated to [null]
[sentence:case GLOBAL_TEXTURE: return new SFValue1f(0)] as been translated to [null]
[sentence:case GLOBAL_GENERIC: return 0] as been translated to [null]
[sentence:case GLOBAL_FLOAT: return 0] as been translated to [null]
[sentence:case GLOBAL_FLOAT2: return 2] as been translated to [null]
[sentence:case GLOBAL_FLOAT3: return 3] as been translated to [null]
[sentence:case GLOBAL_FLOAT4: return 4] as been translated to [null]
[sentence:case GLOBAL_MATRIX2: return 4] as been translated to [null]
[sentence:case GLOBAL_MATRIX3: return 9] as been translated to [null]
[sentence:case GLOBAL_MATRIX4: return 16] as been translated to [null]
[sentence:case GLOBAL_TEXTURE: return 1] as been translated to [null]
[sentence:private static HashMap<String, SFPipelineRegister> predefinedGlobalV=new HashMap<String, SFPipelineRegister>()] as been translated to [null]
[sentence:super(element.getClass().getSimpleName()+genericMessage+":"+additionalMessage)] as been translated to [null]
[sentence:private HashMap<String, SFProgramComponent> components=new HashMap<String, SFProgramComponent>()] as been translated to [null]
[sentence:private HashMap<String, SFPipelineGrid> grids=new HashMap<String, SFPipelineGrid>()] as been translated to [null]
[sentence:private HashMap<String, SFPipelineStructure> structures=new HashMap<String, SFPipelineStructure>()] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT:					floatSize++] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2:					floatSize+=2] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3:					floatSize+=3] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4:					floatSize+=4] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_TEXTURE:					floatSize++] as been translated to [null]
[sentence:List<Entry<SFPipelineRegister, SFProgramComponent>> map=primitive.getPrimitiveMap()] as been translated to [null]
[sentence:primitiveIndices=new int[map.size()][]] as been translated to [null]
[sentence:for (Iterator<Entry<SFPipelineRegister, SFProgramComponent>> iterator = map.iterator()] as been translated to [null]
[BLOCK [for (Iterator<SFPipelineStructureInstance> iterator = structures.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:set.addAll(((SFPipelineGridInstance) grid).getParameters())] as been translated to [null]
[sentence:values=new SFValuenf[structure.size()]] as been translated to [null]
[BLOCK [for (Iterator<SFParameteri> iterator=structure.getAllParameters()]] as been translated to [null]
[sentence:.iterator()] as been translated to [null]
[BLOCK [index++)]] as been translated to [null]
[sentence:values=new SFValuenf[structure.size()]] as been translated to [null]
[BLOCK [for (Iterator<SFParameteri> iterator=structure.getAllParameters()]] as been translated to [null]
[sentence:.iterator()] as been translated to [null]
[BLOCK [index++)]] as been translated to [null]
[BLOCK [if(programs.size()>index)]] as been translated to [null]
[sentence:String[] materialsName=new String[material.size()]] as been translated to [null]
[BLOCK [for (Iterator<SFNode> iterator=nodes.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:System.out.println("(Debug) GLRenderingAlgorithm \t\t : \t\t steps "+steps.size())] as been translated to [null]
[sentence:System.out.println("(Debug) GLRenderingAlgorithm \t\t : \t\t steps "+steps.size())] as been translated to [null]
[sentence:return ((long)fs1)+(((long)fs2)<<32L)] as been translated to [null]
[sentence:byte[] bytes=new byte[4*n]] as been translated to [null]
[sentence:byte[] bytes=new byte[4*n]] as been translated to [null]
[sentence:int Value=(data[index+3]>=0?data[index+3]:256+data[index+3])+				  (data[index+2]>=0?data[index+2]:256+data[index+2])*0x100+				  (data[index+1]>=0?data[index+1]:256+data[index+1])*0x10000+				  (data[index]>=0?data[index]:256+data[index])*0x1000000] as been translated to [null]
[sentence:short Value=(short)((data[index+1]>=0?data[index+1]:256+data[index+1])+				(data[index]>=0?data[index]:256+data[index])*0x100)] as been translated to [null]
[sentence:int Value=(data[index+3]>=0?data[index+3]:256+data[index+3])+				  (data[index+2]>=0?data[index+2]:256+data[index+2])*0x100+				  (data[index+1]>=0?data[index+1]:256+data[index+1])*0x10000+				  (data[index]>=0?data[index]:256+data[index])*0x1000000] as been translated to [null]
[sentence:byte[] data=new byte[4*values.length]] as been translated to [null]
[sentence:int a=(int)(value & 0xffffffffL)] as been translated to [null]
[sentence:int b=(int)((value & 0xffffffff00000000L)>>32L)] as been translated to [null]
[sentence:byte[] data=new byte[4*values.length]] as been translated to [null]
[sentence:data[index+0]=(byte)((intValue & 0xff000000)>>24)] as been translated to [null]
[sentence:data[index+1]=(byte)((intValue & 0xff0000)>>16)] as been translated to [null]
[sentence:data[index+2]=(byte)((intValue & 0xff00)>>8)] as been translated to [null]
[sentence:data[index+3]=(byte)((intValue & 0xff))] as been translated to [null]
[sentence:data[index+0]=(byte)((value & 0xff00)>>8)] as been translated to [null]
[sentence:data[index+1]=(byte)((value & 0xff))] as been translated to [null]
[sentence:data[index+0]=(byte)((value & 0xff000000)>>24)] as been translated to [null]
[sentence:data[index+1]=(byte)((value & 0xff0000)>>16)] as been translated to [null]
[sentence:data[index+2]=(byte)((value & 0xff00)>>8)] as been translated to [null]
[sentence:data[index+3]=(byte)((value & 0xff))] as been translated to [null]
[BLOCK [SFInputStreamJava inStream=new SFInputStreamJava(stream,new SFIOExceptionKeeper()]] as been translated to [null]
[sentence:)] as been translated to [null]
[BLOCK [SFOutputStreamJava outStream=new SFOutputStreamJava(stream1, new SFIOExceptionKeeper()]] as been translated to [null]
[sentence:)] as been translated to [null]
[sentence:byte []bs=new byte[4]] as been translated to [null]
[sentence:byte []bs=new byte[3]] as been translated to [null]
[sentence:byte []bs=new byte[2]] as been translated to [null]
[sentence:byte []bs=stream.readBytes( 2)] as been translated to [null]
[sentence:v.setX(  (2*rec255*( bs[0]>=0?bs[0]:bs[0]+256 ))-1)] as been translated to [null]
[sentence:v.setY(  (2*rec255*( bs[1]>=0?bs[1]:bs[1]+256 ))-1)] as been translated to [null]
[sentence:byte []bs=stream.readBytes( 3)] as been translated to [null]
[sentence:v.setX(  (2*rec255*( bs[0]>=0?bs[0]:bs[0]+256 ))-1)] as been translated to [null]
[sentence:v.setY(  (2*rec255*( bs[1]>=0?bs[1]:bs[1]+256 ))-1)] as been translated to [null]
[sentence:v.setZ(  (2*rec255*( bs[2]>=0?bs[2]:bs[2]+256 ))-1)] as been translated to [null]
[sentence:byte []bs=stream.readBytes( 4)] as been translated to [null]
[sentence:v.setX(  (2*rec255*( bs[0]>=0?bs[0]:bs[0]+256 ))-1)] as been translated to [null]
[sentence:v.setY(  (2*rec255*( bs[1]>=0?bs[1]:bs[1]+256 ))-1)] as been translated to [null]
[sentence:v.setZ(  (2*rec255*( bs[2]>=0?bs[2]:bs[2]+256 ))-1)] as been translated to [null]
[sentence:v.setW(  (2*rec255*( bs[3]>=0?bs[3]:bs[3]+256 ))-1)] as been translated to [null]
[sentence:private HashMap<String, SFList> lists = new HashMap<String, SFList>()] as been translated to [null]
[BLOCK [for(GLEditableArrayCallback call: callBacks)]] as been translated to [null]
[BLOCK [for(GLEditableArrayCallback call: callBacks)]] as been translated to [null]
[sentence:return ")"] as been translated to [null]
[sentence:return "("] as been translated to [null]
[sentence:((SFGL20ImageObject)depthData).build()] as been translated to [null]
[sentence:((SFGL20ImageObject)stencilData).build()] as been translated to [null]
[BLOCK [for (Iterator<SFBufferData> iterator = data.getColorsData().iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:((SFGL20ImageObject)colorBuffer).build()] as been translated to [null]
[sentence:int buffers[] = new int[data.getColorsData().size()]] as been translated to [null]
[BLOCK [for (Iterator<SFBufferData> iterator = data.getColorsData().iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:int texture_object=((SFGL20Texture)colorBuffer).getTextureObject()] as been translated to [null]
[sentence:((SFGL20ImageObject)colorBuffer).build()] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[sentence:case ARGB8: return GL.GL_RGBA8] as been translated to [null]
[sentence:case DEPTH16: return GL.GL_DEPTH_COMPONENT16] as been translated to [null]
[sentence:case DEPTH8: return GL.GL_DEPTH_COMPONENT16] as been translated to [null]
[sentence:case RGB565: return GL.GL_RGB565] as been translated to [null]
[sentence:case STENCIL8: return GL.GL_STENCIL_INDEX8] as been translated to [null]
[sentence:case ARGB4: return GL.GL_RGBA4] as been translated to [null]
[sentence:case GRAY8: return GL.GL_LUMINANCE] as been translated to [null]
[sentence:case RGB8: return GL.GL_RGB] as been translated to [null]
[sentence:default:			return GL.GL_RGBA8] as been translated to [null]
[BLOCK [@Override	public SFBufferData generatePlainBuffer(int width, int height,			SFFormat format)]] as been translated to [null]
[BLOCK [@Override	public SFTextureData generateTextureBuffer(int width, int height,			SFFormat format, Filter filters, WrapMode wrapS, WrapMode wrapT)]] as been translated to [null]
[BLOCK [@Override	public SFTextureData generateBitmapTexture(SFBitmap bitmap, Filter filters,			WrapMode wrapS, WrapMode wrapT)]] as been translated to [null]
[sentence:case NEAREST: return GL.GL_NEAREST] as been translated to [null]
[sentence:case LINEAR: return GL.GL_LINEAR] as been translated to [null]
[sentence:case LINEAR_MIPMAP: return GL.GL_LINEAR_MIPMAP_LINEAR] as been translated to [null]
[sentence:default:			return GL.GL_LINEAR_MIPMAP_LINEAR] as been translated to [null]
[sentence:case NEAREST: return GL.GL_NEAREST] as been translated to [null]
[sentence:case LINEAR: return GL.GL_LINEAR] as been translated to [null]
[sentence:case LINEAR_MIPMAP: return GL.GL_LINEAR] as been translated to [null]
[sentence:default:			return GL.GL_LINEAR] as been translated to [null]
[sentence:case REPEAT: return GL.GL_REPEAT] as been translated to [null]
[sentence:case MIRRORED_REPEAT: return GL.GL_MIRRORED_REPEAT] as been translated to [null]
[sentence:case CLAMP_TO_EDGE: return GL.GL_CLAMP_TO_EDGE] as been translated to [null]
[sentence:default:			return GL.GL_REPEAT] as been translated to [null]
[BLOCK [if(bitmap.getFormat()==SFFormat.GRAY8)]] as been translated to [null]
[sentence:bitmap.getWidth(), bitmap.getHeight(), 0, GL2.GL_RED, GL.GL_UNSIGNED_BYTE, (ByteBuffer)bitmap.getData())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[sentence:private static HashMap<String, String> renameMap=new HashMap<String, String>()] as been translated to [null]
[sentence:private static HashMap<String, String> functionsOperator=new HashMap<String, String>()] as been translated to [null]
[sentence:functionsOperator.put(":","clampf")] as been translated to [null]
[sentence:functionsOperator.put("°","dot")] as been translated to [null]
[sentence:functionsOperator.put("%","texture2D")] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_GENERIC:				return getTypeWrapOpenString(wrappedType,refParameter.getType())] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return "("] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT2:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return "vec2("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return "("] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT3:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return "vec3("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return "vec3("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return "("] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT4:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return "vec4("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return "vec4("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return "vec4("] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_MATRIX4:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return "vec4("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return "("] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_GENERIC:				return getTypeWrapCloseString(wrappedType,refParameter.getType())] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return ").x"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return ").x"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return ").x"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return ").x"] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT2:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return ")"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return ").xy"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return ").xy"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return ").xy"] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT3:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return ")"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return ",0)"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return ").xyz"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_MATRIX4: return ").xyz"] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_FLOAT4:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT: return ")"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: return ",0,1)"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return ",1)"] as been translated to [null]
[BLOCK [case SFParameteri.GLOBAL_MATRIX4:				switch (wrappedType)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: return ",1)"] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT4: return ")"] as been translated to [null]
[BLOCK [if(element==parameters.getLast())]] as been translated to [null]
[sentence:value+=")"] as been translated to [null]
[BLOCK [if(!(parameters.getLast() instanceof SFExpressionVariable))]] as been translated to [null]
[BLOCK [if(function==null && element instanceof SFExpressionVariable)]] as been translated to [null]
[sentence:value+=","] as been translated to [null]
[BLOCK [if(element.getType()!=parameters.getLast().getType() && element.getType()>=0)]] as been translated to [null]
[BLOCK [if(!(element instanceof SFExpressionVariable))]] as been translated to [null]
[BLOCK [if(parameters.getLast()!=element)]] as been translated to [null]
[BLOCK [if(operatorSymbol.equalsIgnoreCase(":"))]] as been translated to [null]
[BLOCK [if(operatorSymbol.equalsIgnoreCase("°"))]] as been translated to [null]
[BLOCK [if(operatorSymbol.equalsIgnoreCase("%"))]] as been translated to [null]
[BLOCK [public static HashMap<String, String> getRenameMap()]] as been translated to [null]
[BLOCK [public static void setRenameMap(HashMap<String, String> renameMap)]] as been translated to [null]
[sentence:public static HashMap<Short, String> definitions=new HashMap<Short, String>()] as been translated to [null]
[BLOCK [if(global.getType()==SFParameteri.GLOBAL_GENERIC)]] as been translated to [null]
[BLOCK [if(!(global instanceof SFPipelineRegister))]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WRITE_ON_TESSELLATION)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.READ_ALL)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WROTE_BY_TRANSFORM)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.READ_ON_TESSELLATION)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WROTE_BY_TESSELLATION)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WROTE_BY_PRIMITIVE)]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WROTE_BY_MATERIAL)]] as been translated to [null]
[sentence:return !requiresDeclaration(global)] as been translated to [null]
[BLOCK [if(!(global instanceof SFPipelineRegister))]] as been translated to [null]
[BLOCK [if(gl.getUse()==SFPipelineRegister.WROTE_BY_TRANSFORM)]] as been translated to [null]
[sentence:case UNIFORM_MODIFIER:					return "uniform "+getTypeDeclararion()+" "+name+"] as been translated to [null]
[sentence:case VARYING_MODIFIER:					return "varying "+getTypeDeclararion()+" "+name+"] as been translated to [null]
[sentence:default:				break] as been translated to [null]
[sentence:private static float modelX=0, modelY=0, modelZ=0] as been translated to [null]
[sentence:private static float rotX=0, rotY=0, rotZ=0] as been translated to [null]
[sentence:((SFGL20Program)program).setTransformData(modelX,modelY,modelZ,rotX,rotY,rotZ)] as been translated to [null]
[sentence:Integer[][] uniforms=((SFGL20Program)program).getData().getAllPrimitiveUniforms(				registers)] as been translated to [null]
[sentence:((SFGL20Program)program).setIndexedData(indices,prArray.getPrimitiveData(),uniforms,					registers)] as been translated to [null]
[sentence:List<Entry<SFPipelineRegister, SFProgramComponent>> wroteRegisters=primitive.getPrimitiveMap()] as been translated to [null]
[sentence:primitiveData=new SFGL20ListData[wroteRegisters.size()]] as been translated to [null]
[sentence:registers=new SFPipelineRegister[wroteRegisters.size()]] as been translated to [null]
[BLOCK [for (Iterator<Entry<SFPipelineRegister, SFProgramComponent>> iterator = wroteRegisters.iterator();iterator.hasNext();index++)]] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT3: primitiveData[index]=new SFGL20Vertex3fArray()] as been translated to [null]
[sentence:case SFParameteri.GLOBAL_FLOAT2: primitiveData[index]=new SFGL20Vertex2fArray()] as been translated to [null]
[BLOCK [@Override	protected void assignValues(SFPrimitiveIndices writing,			SFPrimitiveIndices reading) throws SFArrayElementException]] as been translated to [null]
[BLOCK [@Override	public void setElementData(int index, SFPrimitiveIndices element,			int registerIndex) throws SFArrayElementException]] as been translated to [null]
[BLOCK [if(strData.size()<=parametersIndex)]] as been translated to [null]
[BLOCK [if(value.getSize()!=element.getSize())]] as been translated to [null]
[sentence:private HashMap<Integer, Integer> frameBuffers=new HashMap<Integer, Integer>()] as been translated to [null]
[sentence:case UNIFORM_MODIFIER:					return "uniform "+getTypeDeclararion()+" "+name+"] as been translated to [null]
[sentence:case VARYING_MODIFIER:					return "varying "+getTypeDeclararion()+" "+name+"] as been translated to [null]
[sentence:default:				break] as been translated to [null]
[sentence:private static HashMap<Short, String> declarations=new HashMap<Short, String>()] as been translated to [null]
[sentence:String declaration=SFGL20GlobalV.getModifiers(pr)+" "+SFGL20GlobalV.getType(pr.getType())+" "+				name+"] as been translated to [null]
[sentence:\n"] as been translated to [null]
[BLOCK [for (Iterator<SFParameteri> iterator = sfParameters.iterator();iterator.hasNext();)]] as been translated to [null]
[sentence:\n"] as been translated to [null]
[BLOCK [for (;data.hasNext();)]] as been translated to [null]
[BLOCK [while(text!=null)]] as been translated to [null]
[sentence:public void setIndexedData(SFPrimitiveIndices indices,			SFGL20ListData<SFValuenf>[] datas, Integer[][] uniforms,			SFPipelineRegister[] registers)] as been translated to [null]
[sentence:System.out.println("idsBack.length="+idsBack.length)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 0, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.3f, 0.1f)] as been translated to [null]
[sentence:System.out.println(((SFVertex3f)matTest.getValue(0)).toString())] as been translated to [null]
[sentence:System.out.println(((SFVertex3f)matTest.getValue(1)).toString())] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 0, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(1.0f, 1.0f, 0.0f)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 0, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 1, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:f+=.03f] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(0).getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(0)).set3f(1, 1, 0)] as been translated to [null]
[sentence:((SFVertex3f)mat.getValue(1)).set3f(0.1f, 0.1f, 0.1f)] as been translated to [null]
[sentence:SFPipelineStructureInstance lightStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(0)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(0)).set3f(1, 0, 1)] as been translated to [null]
[sentence:((SFVertex3f)lit.getValue(1)).set3f(1, 1, 1)] as been translated to [null]
[sentence:float y=-1+2*(float)(Math.random())] as been translated to [null]
[sentence:float rot=(float)(2*Math.PI*Math.random())] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[blockDeclaration:1,1,0,						1,0,0,						1,0,1,						1,0,1,						1,0,1,						0,1,1,						4,4,0] as been translated to [null]
[blockDeclaration:1,1,0,						1,0,0,						1,0,1,						1,0,1,						1,0,1,						0,1,1,						4,4,0] as been translated to [null]
[sentence:SFMeshGeometry quadsSurfaceGeometry = (new StrangeCylinder()).generateGeometry(primitive)] as been translated to [null]
[blockDeclaration:(new StrangeCylinder()).generateGeometry(primitive),				(new Cone()).generateGeometry(primitive),				(new LateralTube()).generateGeometry(primitive),				(new StrangeGlass()).generateGeometry(primitive),				(new Mushroom()).generateGeometry(primitive)] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_PLUS)]] as been translated to [null]
[BLOCK [if(geometriesIndex>=geometries.length)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_MINUS)]] as been translated to [null]
[blockDeclaration:1,1,0,						1,0,0,						1,0,1] as been translated to [null]
[sentence:WrapMode.REPEAT, WrapMode.REPEAT)] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_PLUS)]] as been translated to [null]
[BLOCK [if(selectedTexture>=texture.length)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_MINUS)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_A)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_B)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_C)]] as been translated to [null]
[sentence:tut06TexturedGeometry.geometry = (new StrangeGlass()).generateGeometry(primitive)] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_A)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_B)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_C)]] as been translated to [null]
[sentence:tut06TexturedGeometry.geometry = (new StrangeCylinder()).generateGeometry(primitive)] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_A)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_B)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_C)]] as been translated to [null]
[sentence:GL2 gl=(GL2)(arg0.getGL())] as been translated to [null]
[sentence:gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)] as been translated to [null]
[sentence:gl.glPolygonMode(GL.GL_FRONT_AND_BACK,wireframe?GL2.GL_LINE:GL2.GL_FILL)] as been translated to [null]
[BLOCK [@Override		public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3,				int arg4)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==KeyEvent.VK_W)]] as been translated to [null]
[BLOCK [if(e.getKeyCode()==keyCode)]] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getMaterial(materialIndex).getStructures())).get(structureIndex)] as been translated to [null]
[sentence:SFPipelineStructureInstance materialStructureInstance=((List<SFPipelineStructureInstance>)(program.getLightStep().getStructures())).get(structureIndex)] as been translated to [null]

package codeconverter;

/**
 * A CodeMatch is the identification of a CodeElement inside 
 * an Array of Strings extracted from a Code File.
 * 
 * @author Alessandro Martinelli
 */
public class CodeMatch implements Comparable<CodeMatch> {

	private int lineStart;
	private int lineEnd;
	private ICodeTemplate matcher;

	/**
	 * @param lineStart	the index of the first String in the array which starts the CodeElement which has been identified
	 * @param lineEnd  the index of the last String in the array  which ends the CodeElement which has been identified
	 * @param element The identified code element
	 */
	//NOTE: when generated by code Pattern lineStart==lineEnd, that's the pattern is recognized on a line.
	public CodeMatch(int lineStart, int lineEnd, ICodeTemplate element) {
		super();
		this.lineStart=lineStart;
		this.lineEnd=lineEnd;
		matcher=element;
	}

	/**
	 * @return the index of the first String in the array which starts the CodeElement which has been identified
	 */
	public int getLineStart() {
		return lineStart;
	}
	
	/**
	 * @return the index of the last String in the array  which ends the CodeElement which has been identified
	 */
	public int getLineEnd() {
		return lineEnd;
	}

	@Override
	public int compareTo(CodeMatch o) {
		if (lineStart == o.lineStart) {
			return o.lineEnd - lineStart;
		}
		return (lineStart - o.lineStart);
	}

	/**
	 * @return the identified CodeElement
	 */
	public ICodeTemplate getMatcher() {
		return matcher;
	}

	@Override
	public String toString() {
		return "["+lineStart+"-"+lineEnd+"]:"+this.matcher;
	}
}
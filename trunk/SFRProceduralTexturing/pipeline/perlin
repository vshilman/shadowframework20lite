

structure ImageOctave{
	float bitmapSize;
	float octave;
	float intensity;
}


state BlendModeAdd(){
	glClearColor(0.0,0.0,0.0,1);
	glClear(GL_COLOR_BUFFER_BIT);
	glEnable(GL_BLEND);
	glDisable(GL_DEPTH_TEST);
	glBlendFunc(GL_ONE, GL_ONE);
}

//Note : always put texture Parameters AFTER data parameters, or its not going to work now !
materialComponent NearestOctaveFilter(ImageOctave octave,Texture texture0){
	vec2 multTexCoord = texCoord0*vec2(octave_octave);
	vec2 uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	vec2 uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	vec3 color=texture2D(texture0_texture,uvcoordEff).xyz*vec3(octave_intensity);
	vec3 matnormal = normal;
}

materialComponent LinearOctaveFilter(ImageOctave octave,Texture texture0){
	vec2 multTexCoord = texCoord0*vec2(octave_octave);
	vec2 uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	vec2 uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	vec2 uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	float delta = 1.0/octave_bitmapSize;
	vec3 zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	vec3 zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	vec3 zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	vec3 zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	vec3 t=vec3(uvcoordBase.x);
	vec3 s=vec3(uvcoordBase.y);
	vec3 tm=vec3(1.0)-t;
	vec3 sm=vec3(1.0)-s;
	vec3 color=vec3(octave_intensity)*(sm*(zImm00*tm+zImm10*t)+s*(zImm01*tm+zImm11*t));
	vec3 matnormal = normal;
}


materialComponent CubicOctaveFilter(ImageOctave octave,Texture texture0){
	vec2 multTexCoord = texCoord0*vec2(octave_octave);
	vec2 uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	vec2 uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	vec2 uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	float delta = 1.0/octave_bitmapSize;
	vec3 zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	vec3 zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	vec3 zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	vec3 zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	
	vec3 Imm00du = (zImm10-texture2D(texture0_texture,uvcoordEff+(-delta,0.0)));
	vec3 Imm00dv = (zImm01-texture2D(texture0_texture,uvcoordEff+(0.0,-delta)));
	
	vec3 Imm10du = (texture2D(texture0_texture,uvcoordEff+(2.0*delta,0.0))-zImm00);
	vec3 Imm10dv = (zImm11-texture2D(texture0_texture,uvcoordEff+(delta,-delta)));
	
	vec3 Imm01du = (zImm11-texture2D(texture0_texture,uvcoordEff+(-delta,delta)));
	vec3 Imm01dv = (texture2D(texture0_texture,uvcoordEff+(0.0,2.0*delta))-zImm00);
	
	vec3 Imm11du = (texture2D(texture0_texture,uvcoordEff+(2.0*delta,delta))-zImm01);
	vec3 Imm11dv = (texture2D(texture0_texture,uvcoordEff+(delta,2.0*delta))-zImm10);
	
	vec3 t=vec3(uvcoordBase.x);
	vec3 s=vec3(uvcoordBase.y);
	vec3 tm=vec3(1.0)-t;
	vec3 sm=vec3(1.0)-s;
	
	vec3 mult=vec3(0.1666);
	
	vec3 b00 = zImm00;
	vec3 b01 = zImm00+(Imm00du*mult);
	vec3 b02 = zImm10-(Imm10du*mult);
	vec3 b03 = zImm10;
	vec3 b10 = zImm00+(Imm00dv*mult);
	vec3 b11 = zImm00+(Imm00dv*mult)+(Imm00du*mult);
	vec3 b12 = zImm10+(Imm10dv*mult)-(Imm10du*mult);
	vec3 b13 = zImm10+(Imm10dv*mult);
	vec3 b20 = zImm01-(Imm01dv*mult);
	vec3 b21 = zImm01-(Imm01dv*mult)+(Imm01du*mult);
	vec3 b22 = zImm11-(Imm11dv*mult)-(Imm11du*mult);
	vec3 b23 = zImm11-(Imm11dv*mult);
	vec3 b30 = zImm01;
	vec3 b31 = zImm01+(Imm01du*mult);
	vec3 b32 = zImm11-(Imm11du*mult);
	vec3 b33 = zImm11;
	
	vec3 v3 = vec3(3.0);
	
	vec3 val3 = sm*sm*sm*(b00*tm*tm*tm+b01*v3*t*tm*tm+b02*v3*t*t*tm+b03*t*t*t)+v3*s*sm*sm*(b10*tm*tm*tm+b11*v3*t*tm*tm+b12*v3*t*t*tm+b13*t*t*t)+v3*s*s*sm*(b20*tm*tm*tm+b21*v3*t*tm*tm+b22*v3*t*t*tm+b23*t*t*t)+s*s*s*(b30*tm*tm*tm+b31*v3*t*tm*tm+b32*v3*t*t*tm+b33*t*t*t);
	
	vec3 color=vec3(octave_intensity)*val3;
	vec3 matnormal = normal;
}









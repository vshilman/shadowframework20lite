materialComponent BrickMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
	
	
}

materialComponent BrickMatTextured(Size01 size,Colors01 colors,Granularity g,Texture texture0){
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.55,0.55,0.55)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.45,0.45,0.45)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	
	vec3 color = base+vec3(offset/vec3(g_granularity));
	vec3 matnormal = normal;
}

materialComponent BrickMatTexturedTry(Size01 size,Colors01 colors,Granularity g,Texture texture0){
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.55,0.55,0.55)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.45,0.45,0.45)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	
	vec3 color = base+vec3(offset/vec3(g_granularity));
	vec3 matnormal = normal;
}

materialComponent TileMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
}

materialComponent PaperMat(Size01 size,Colors01 colors){

	vec2 pct = vec2(size_mortarSize, 1.0);
	
	vec2 MCpos = vec2(position.xy);
	
	vec2 pos = fract(MCpos/size_brickSize);
	
	vec2 usePaper = step(pos, pct);
	
	vec3 color = mix(colors_mortarColor, colors_brickColor, usePaper.x * usePaper.y);
	vec3 matnormal = normal;
}

materialComponent SkyColor(Color c){
	vec3 color = (c_color);
	vec3 matnormal = normal;
}

materialComponent BrickMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
	
	
}

materialComponent BrickMatTextured(Size01 size,Colors01 colors,Granularity g,Texture texture0){
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.55,0.55,0.55)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.45,0.45,0.45)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	
	vec3 color = base+vec3(offset/vec3(g_granularity));
	vec3 matnormal = normal;
}

materialComponent BrickMatTexturedTry(Size01 size,Colors01 colors,Granularity g,Texture texture0){
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.55,0.55,0.55)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.45,0.45,0.45)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	
	vec3 color = base+vec3(offset/vec3(g_granularity));
	vec3 matnormal = normal;
}

materialComponent TileMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
}

materialComponent PaperMat(Size01 size,Colors01 colors){

	vec2 pct = vec2(size_mortarSize, 1.0);
	
	vec2 MCpos = vec2(position.xy);
	
	vec2 pos = fract(MCpos/size_brickSize);
	
	vec2 usePaper = step(pos, pct);
	
	vec3 color = mix(colors_mortarColor, colors_brickColor, usePaper.x * usePaper.y);
	vec3 matnormal = normal;
}

materialComponent SkyColor(Color c){
	vec3 color = (c_color);
	vec3 matnormal = normal;
}

materialComponent Fbm(ImageOctave octave,Texture texture0){
	
	float gain = 0.5;
	float H = 0.5;
	float amplitude0 = gain;
	float amplitude1 = amplitude0*gain;
	float amplitude2 = amplitude1*gain;
	
	vec2 multTexCoord = texCoord0*vec2(octave_octave);
	vec2 uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	vec2 uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	vec2 uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	float delta = 1.0/octave_bitmapSize;
	vec3 zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	vec3 zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	vec3 zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	vec3 zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	vec3 t=vec3(uvcoordBase.x);
	vec3 s=vec3(uvcoordBase.y);
	vec3 tm=vec3(1.0)-t;
	vec3 sm=vec3(1.0)-s;
	vec3 perlin0=vec3(octave_intensity)*(sm*(zImm00*tm+zImm10*t)+s*(zImm01*tm+zImm11*t));
	
	multTexCoord = texCoord0*vec2(octave_octave)*2;
	uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	delta = 1.0/octave_bitmapSize;
	zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	t=vec3(uvcoordBase.x);
	s=vec3(uvcoordBase.y);
	tm=vec3(1.0)-t;
	sm=vec3(1.0)-s;
	vec3 perlin1=vec3(octave_intensity)*(sm*(zImm00*tm+zImm10*t)+s*(zImm01*tm+zImm11*t));
	
	
	multTexCoord = texCoord0*vec2(octave_octave)*4;
	uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	delta = 1.0/octave_bitmapSize;
	zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	t=vec3(uvcoordBase.x);
	s=vec3(uvcoordBase.y);
	tm=vec3(1.0)-t;
	sm=vec3(1.0)-s;
	vec3 perlin2=vec3(octave_intensity)*(sm*(zImm00*tm+zImm10*t)+s*(zImm01*tm+zImm11*t));
	
	
	float value = perlin0.x * amplitude0 + perlin1.x * amplitude1 + perlin2.x * amplitude2;
	vec3 skyColor = vec3(0.15,0.15,0.6);
	vec3 cloudColor = vec3(1,1,1);
	
	vec3 color = vec3(mix(skyColor,cloudColor,smoothstep(0,1,value)));
	vec3 matnormal = normal;
	
}
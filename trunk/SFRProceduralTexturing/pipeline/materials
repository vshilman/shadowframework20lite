materialComponent BrickMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
	
	
}

materialComponent BrickMatTextured(Size01 size,Colors01 colorsTexture texture0){
	vec3 red = vec3(0.5,0.1,0.1);
	vec3 gray = vec3(0.6,0.6,0.6);
	vec2 size = vec2(0.3,0.15);
	vec2 pct = vec2(0.90, 0.85);
	
	vec2 MCpos = vec2(position.xy);
	
	vec2 pos = MCpos/size;
	
	pos.x += 0.5 * step(0.5, fract(pos.y*0.5));
	
	pos = fract(pos);
	
	vec2 useBrick = step(pos, pct);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.5,0.5,0.5)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.5,0.5,0.5)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 color = mix(gray, red, useBrick.x * useBrick.y)*vec3(colortmp+vec3(0.3,0.3,0.3));
	vec3 matnormal = normal;
}

materialComponent TileMat(Size01 size,Colors01 colors){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	vec3 color = base;
	vec3 matnormal = normal;
}

materialComponent PaperMat(Size01 size,Colors01 colors){

	vec2 pct = vec2(size_mortarSize, 1.0);
	
	vec2 MCpos = vec2(position.xy);
	
	vec2 pos = fract(MCpos/size_brickSize);
	
	vec2 usePaper = step(pos, pct);
	
	vec3 color = mix(colors_mortarColor, colors_brickColor, usePaper.x * usePaper.y);
	vec3 matnormal = normal;
}
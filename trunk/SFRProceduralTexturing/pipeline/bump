

materialComponent BrickBumpMap(Size01 size,Colors01 colors,Eps eps,Texture texture0){
	
	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = size_mortarSize* 0.5/totwidth;
	float MHF = size_mortarSize* 0.5/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);

	float sbump = smoothstep(0, MWF, pos.x)- smoothstep(1-MWF, 1, pos.x);
	float tbump = smoothstep(0, MHF, pos.y)- smoothstep(1-MHF, 1, pos.y);
	float stbump = sbump * tbump;
	
	float eps = eps_eps;
	float epsRec = 1.0/eps;

	float dusbump = smoothstep(0, MWF, pos.x + du.x*eps)- smoothstep(1-MWF, 1, pos.x + du.x*eps);
	float dutbump = smoothstep(0, MHF, pos.y + du.y*eps)- smoothstep(1-MHF, 1, pos.y + du.y*eps);
	float dustbump = dusbump * dutbump;
	float DuF = (dustbump - stbump)*epsRec;
	
	float dvsbump = smoothstep(0, MWF, pos.x + dv.x*eps)- smoothstep(1-MWF, 1, pos.x + dv.x*eps);
	float dvtbump = smoothstep(0, MHF, pos.y + dv.y*eps)- smoothstep(1-MHF, 1, pos.y + dv.y*eps);
	float dvstbump = dvsbump * dvtbump;
	float DvF = (dvstbump - stbump)*epsRec;				
	
	vec3 U= vec3(vec3(DuF)*(cross(normal,dv)));
	vec3 V= vec3(-vec3(DvF)*(cross(normal,du)));
	vec3 D = vec3((1/length(normal))*vec3(U+V));
	vec3 Nf = vec3(normal + D);

	
	
	vec3 lightPos = vec3(0,1,0.8);
	vec3 lightColor = vec3(1,1,1);
	vec3 ambientColor = vec3(1,1,1);
	vec3 diffuseColor = base;
	
	vec3 normalMap = normalize(Nf);
	
	float reduction = 0.0;
	normalMap = normalize(normalMap+normal*vec3(reduction));
	
	vec3 lightDir = normalize(vec3(lightPos.x - (position.x), lightPos.y - (position.y), lightPos.z));
		
	float DD = length(lightDir);
	vec3 NN = normalMap;
	vec3 LL = vec3(normalize(lightDir));
	
	vec3 diffuse = vec3((lightColor * max(dot(NN,LL), 0.0)));
	vec3 ambient = ambientColor;
	
	float att = 1.0/(0.3 + 0.3*DD + 0.3*DD*DD);
	vec3 attIntensity = vec3(ambient+diffuse*att);
	
	vec3 intensity = vec3(ambient+diffuse);
	vec3 finalColor = vec3(diffuseColor.xyz * intensity);
	
			
	vec3 color = finalColor;
	vec3 matnormal = normal;
}


materialComponent BrickBumpMapTextured(Size01 size,Colors01 colors,Granularity g,Texture texture0){

	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);
	
	float sbump = smoothstep(0, MWF, pos.x)- smoothstep(1-MWF, 1, pos.x);
	float tbump = smoothstep(0, MHF, pos.y)- smoothstep(1-MHF, 1, pos.y);
	
	float stbump = sbump * tbump;
	
	float eps = 0.02;
	float epsRec = 1.0/eps;
	
	float dusbump = smoothstep(0, MWF, pos.x + du.x*eps)- smoothstep(1-MWF, 1, pos.x + du.x*eps);
	float dutbump = smoothstep(0, MHF, pos.y + du.y*eps)- smoothstep(1-MHF, 1, pos.y + du.y*eps);
	float dustbump = dusbump * dutbump;
	float DuF = (dustbump - stbump)*epsRec;
	
	float dvsbump = smoothstep(0, MWF, pos.x + dv.x*eps)- smoothstep(1-MWF, 1, pos.x + dv.x*eps);
	float dvtbump = smoothstep(0, MHF, pos.y + dv.y*eps)- smoothstep(1-MHF, 1, pos.y + dv.y*eps);
	float dvstbump = dvsbump * dvtbump;
	float DvF = (dvstbump - stbump)*epsRec;				
	
	vec3 U= vec3(vec3(DuF) * (cross(normal,dv)));
	vec3 V= vec3(-vec3(DvF) * (cross(normal,du)));
	vec3 D = vec3((1/length(normal))*vec3(U.x,V.y,0));
	vec3 Nf = vec3(normal + D);


	vec3 lightPos = vec3(-0.9,1,0.5);
	vec3 lightColor = vec3(0.4,0.4,0.4);
	vec3 ambientColor = vec3(1,1,1);
	vec3 diffuseColor = base;
	
	vec3 normalMap = normalize(Nf);
	
	vec3 lightDir = normalize(vec3(lightPos.x - (position.x), lightPos.y - (position.y), lightPos.z));	
	float DD = length(lightDir);
	vec3 NN = normalMap;
	vec3 LL = vec3(normalize(lightDir));
	
	vec3 diffuse = vec3((lightColor * max(dot(NN,LL), 0.0)));
	vec3 ambient = ambientColor;
	
	float att = 1.0/(0.3 + 0.3*DD + 0.3*DD*DD);
	vec3 attIntensity = vec3(ambient+diffuse*att);
	
	vec3 intensity = vec3(ambient+diffuse);
	vec3 finalColor = vec3(diffuseColor.xyz * intensity);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.5,0.5,0.5)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.5,0.5,0.5)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	finalColor = finalColor+vec3(offset/vec3(g_granularity));
	
	vec3 color = finalColor;	
	vec3 matnormal = normal;
}



materialComponent BrickBumpMapTexturedNoSmooth(Size01 size,Colors01 colors,Granularity g,Texture texture0){

	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = (size_mortarSize* 0.5)/totwidth;
	float MHF = (size_mortarSize* 0.5)/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);

	float sbump = step(MWF, pos.x)- step(1-MWF,pos.x );
	float tbump = step(MHF, pos.y)- step( 1-MHF,pos.y);
	
	
	float stbump = sbump * tbump;
	
	float eps = 0.01;
	float epsRec = 1.0/eps;
	
	float dusbump = step(MWF, pos.x + du.x*eps)- step(1-MWF, pos.x + du.x*eps);
	float dutbump = step(MHF, pos.y + du.y*eps)- step(1-MHF, pos.y + du.y*eps);
	float dustbump = dusbump * dutbump;
	float DuF = (dustbump - stbump)*epsRec;
	
	float dvsbump = step(MWF, pos.x + dv.x*eps)- step(1-MWF, pos.x + dv.x*eps);
	float dvtbump = step(MHF, pos.y + dv.y*eps)- step(1-MHF, pos.y + dv.y*eps);
	float dvstbump = dvsbump * dvtbump;
	float DvF = (dvstbump - stbump)*epsRec;				
	
	vec3 U= vec3(vec3(DuF) * (cross(normal,dv)));
	vec3 V= vec3(-vec3(DvF) * (cross(normal,du)));
	vec3 D = vec3((1/length(normal))*vec3(U.x,V.y,0));
	vec3 Nf = vec3(normal + D);


	vec3 lightPos = vec3(-0.9,1,0.5);
	vec3 lightColor = vec3(0.4,0.4,0.4);
	vec3 ambientColor = vec3(1,1,1);
	vec3 diffuseColor = base;
	
	vec3 normalMap = normalize(Nf);
	
	vec3 lightDir = normalize(vec3(lightPos.x - (position.x), lightPos.y - (position.y), lightPos.z));	
	float DD = length(lightDir);
	vec3 NN = normalMap;
	vec3 LL = vec3(normalize(lightDir));
	
	vec3 diffuse = vec3((lightColor * max(dot(NN,LL), 0.0)));
	vec3 ambient = ambientColor;
	
	float att = 1.0/(0.3 + 0.3*DD + 0.3*DD*DD);
	vec3 attIntensity = vec3(ambient+diffuse*att);
	
	vec3 intensity = vec3(ambient+diffuse);
	vec3 finalColor = vec3(diffuseColor.xyz * intensity);
	
	vec3 colormax = texture2D(texture0_texture,texCoord0).xyz*step(texture2D(texture0_texture,texCoord0).xyz,vec3(0.7,0.7,0.7))+ vec3(0.5,0.5,0.5)*step(vec3(0.7,0.7,0.7),texture2D(texture0_texture,texCoord0).xyz);
	vec3 colormin = colormax*step(vec3(0.3,0.3,0.3),colormax)+ vec3(0.5,0.5,0.5)*step(colormax,vec3(0.3,0.3,0.3));
	vec3 colortmp = colormin;
	
	vec3 offset = vec3((texture2D(texture0_texture,texCoord0).xyz * vec3(2.0)) - vec3(1));
	finalColor = finalColor+vec3(offset/vec3(g_granularity));
	
	vec3 color = finalColor;	
	vec3 matnormal = normal;
}










materialComponent BrickBumpMapPerlin(Size01 size,Colors01 colors,Eps eps,ImageOctave octave,Texture texture0){

	float totwidth = size_brickSize.x+size_mortarSize;
	float totheight = size_brickSize.y+size_mortarSize;
	
	float MWF = size_mortarSize* 0.5/totwidth;
	float MHF = size_mortarSize* 0.5/totheight;
	
	vec2 MCpos = vec2(position.xy);
	vec2 pos = MCpos/size_brickSize;
	pos.x = pos.x + step(0.5, mod(pos.y*0.5,1))*0.5;
	float sbrick = floor(pos.x);
	float tbrick = floor(pos.y);
	pos.x -= sbrick;
	pos.y -= tbrick;
	float w = step(MWF, pos.x) - step(1-MWF, pos.x);
	float h = step(MHF, pos.y) - step(1-MHF, pos.y);
		
	vec3 base = mix(colors_mortarColor, colors_brickColor, w*h);


	float sbump = smoothstep(0, MWF, pos.x)- smoothstep(1-MWF, 1, pos.x);
	float tbump = smoothstep(0, MHF, pos.y)- smoothstep(1-MHF, 1, pos.y);
	float stbump = sbump * tbump;
	
	float eps = eps_eps;
	float epsRec = 1.0/eps;
	
	float dusbump = smoothstep(0, MWF, pos.x + du.x*eps)- smoothstep(1-MWF, 1, pos.x + du.x*eps);
	float dutbump = smoothstep(0, MHF, pos.y + du.y*eps)- smoothstep(1-MHF, 1, pos.y + du.y*eps);
	float dustbump = dusbump * dutbump;
	float DuF = (dustbump - stbump)*epsRec;
	
	float dvsbump = smoothstep(0, MWF, pos.x + dv.x*eps)- smoothstep(1-MWF, 1, pos.x + dv.x*eps);
	float dvtbump = smoothstep(0, MHF, pos.y + dv.y*eps)- smoothstep(1-MHF, 1, pos.y + dv.y*eps);
	float dvstbump = dvsbump * dvtbump;
	float DvF = (dvstbump - stbump)*epsRec;				
	
	vec3 U= vec3(vec3(DuF) * (cross(normal,dv)));
	vec3 V= vec3(-vec3(DvF) * (cross(normal,du)));
	vec3 D = vec3((1/length(normal))*vec3(U+V));
	vec3 Nf = vec3(normal + D);


	vec3 lightPos = vec3(0,1,0.8);
	vec3 lightColor = vec3(1,1,1);
	vec3 ambientColor = vec3(1,1,1);
	vec3 diffuseColor = base;
	
	vec3 normalMap = normalize(Nf);
	
	vec3 lightDir = normalize(vec3(lightPos.x - (position.x), lightPos.y - (position.y), lightPos.z));	
	float DD = length(lightDir);
	vec3 NN = normalMap;
	vec3 LL = vec3(normalize(lightDir));
	
	vec3 diffuse = vec3((lightColor * max(dot(NN,LL), 0.0)));
	vec3 ambient = ambientColor;
	
	float att = 1.0/(0.3 + 0.3*DD + 0.3*DD*DD);
	vec3 attIntensity = vec3(ambient+diffuse*att);
	
	vec3 intensity = vec3(ambient+diffuse);
	vec3 finalColor = vec3(diffuseColor.xyz * intensity);
	
	
	
	
	vec2 multTexCoord = texCoord0*vec2(octave_octave);
	vec2 uvcoord = floor(vec2(octave_bitmapSize)*multTexCoord);
	vec2 uvcoordBase = vec2(octave_bitmapSize)*multTexCoord-uvcoord;
	vec2 uvcoordEff = uvcoord/vec2(octave_bitmapSize);
	float delta = 1.0/octave_bitmapSize;
	vec3 zImm00=texture2D(texture0_texture,uvcoordEff).xyz;
	vec3 zImm10=texture2D(texture0_texture,uvcoordEff+vec2(delta,0.0)).xyz;
	vec3 zImm01=texture2D(texture0_texture,uvcoordEff+vec2(0.0,delta)).xyz;
	vec3 zImm11=texture2D(texture0_texture,uvcoordEff+vec2(delta,delta)).xyz;
	vec3 t=vec3(uvcoordBase.x);
	vec3 s=vec3(uvcoordBase.y);
	vec3 tm=vec3(1.0)-t;
	vec3 sm=vec3(1.0)-s;
	
	
	vec3 color=vec3(finalColor * vec3(vec3(octave_intensity)*(sm*(zImm00*tm+zImm10*t)+s*(zImm01*tm+zImm11*t))+vec3(0.2)));
	vec3 matnormal = normal;
	
}





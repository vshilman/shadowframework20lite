//PRIMITIVE

@begin Primitive TrianglePND1
@domain Triangle
@block POSITION Triangle
@block NORMAL Triangle
@block DATA1 Triangle
@end

@begin Primitive Triangle2PND1
@domain Triangle
@block POSITION InterpolatingTriangle2
@block NORMAL InterpolatingTriangle2
@block DATA1 InterpolatingTriangle2
@end



@begin PrimitiveComponent Triangle3Coefficients
@use uvw
//Acoeff = w*(w^2-(5/2)*(u+v)*w+(u^2+v^2)-(2/27)u*v)
@define Acoeff:1 w*(w*w+(-2.5)*w*(1-w)+(u*u+v*v)+2*u*v)
@define Bcoeff:1 u*(u*u+(-2.5)*u*(1-u)+(v*v+w*w)+2*v*w)
@define Ccoeff:1 v*(v*v+(-2.5)*v*(1-v)+(w*w+u*u)+2*w*u)
//ABcoeff = u*w*( 9*w - (9/2)*u + v )
@define ABcoeff:1 w*u*(9*w+(-4.5)*u+(-4.5)*v)
@define BAcoeff:1 u*w*(9*u+(-4.5)*w+(-4.5)*v)
@define BCcoeff:1 u*v*(9*u+(-4.5)*v+(-4.5)*w)
@define CBcoeff:1 v*u*(9*v+(-4.5)*u+(-4.5)*w)
@define CAcoeff:1 v*w*(9*v+(-4.5)*w+(-4.5)*u)
@define ACcoeff:1 w*v*(9*w+(-4.5)*v+(-4.5)*u)
//ABCcoeff = (2/9)*u*v*w
@define ABCcoeff:1 w*v*u*27
@end

@begin PrimitiveComponent InterpolatingTriangle3
@grid A,B,C,AB,BA,BC,CB,CA,AC,ABC as Triangle:3:<>
@write <> A*PAcoeff+B*PBcoeff+C*PCcoeff+AB*PABcoeff+BA*PBAcoeff+BC*PBCcoeff+CB*PCBcoeff+CA*PCAcoeff+AC*PACcoeff+ABC*PABCcoeff
@end



@begin Primitive Triangle3PND1
@domain Triangle
@block POSITION Triangle3Coefficients
@block POSITION InterpolatingTriangle3
@block NORMAL InterpolatingTriangle3
@block DATA1 InterpolatingTriangle3
@end


//TRANSFORM

@begin TransformsComponent BasicPND1
@use modelview
@use projection
@use vectorsModelview
@use P
@use N
@use prData01
@write position projection*modelview*P
@write normal vectorsModelview*N  
@write data1 prData01
@end


//MATERIAL 

@begin MaterialComponent Data1OccMat
@use data1
@use normal
@param diffColor as Mat01
@param specColor as Mat01
@param ambColor as Mat01
@write color diffColor
@write color1 specColor
@write color2 ambColor
@write color3 data1
@write matnormal normal
@end


//LIGHT

@begin LightStepComponent Ambient
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use color2
@write fColor color2*ambIntensity
@end


@begin LightStepComponent AmbientAO
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use color2
@use color3
@define tmp1:3 color2*color3*ambIntensity
@write fColor tmp1
@end

@begin LightStepComponent Lambert
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use matnormal 
@use position
@use color
@use color2
@define tmp1:3 normalize(lPosition-position)
@define tmp3:3 dot(normalize(matnormal),tmp1) 
@write fColor (color*diffIntensity*tmp3)+(color2*ambIntensity)
@end

@begin LightStepComponent LambertAO
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use color
@use color2
@use color3
@use matnormal
@use position
@define L:3 normalize(lPosition-position)
@define tmp1:3 dot(normalize(matnormal),L)
@write fColor (color*diffIntensity*tmp1)+(color2*ambIntensity*color3)
@end

@begin LightStepComponent SpecularLight
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use matnormal
@use position
@use color1
@use color2
@define L:3 normalize(lPosition-position)
@define V:3 normalize(-position)
@define H:3 L+V
@define tmp1:3 dot(normalize(matnormal),normalize(H))
@define tmp2:3 pow(tmp1,2)
@write fColor (color1*specIntensity*tmp2)+(color2*ambIntensity)
@end

@begin LightStepComponent SpecularLightAO
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use matnormal
@use position
@use color1
@use color2
@use color3
@define L:3 normalize(lPosition-position)
@define V:3 normalize(-position)
@define H:3 L+V
@define tmp1:3 dot(normalize(matnormal),normalize(H))
@define tmp2:3 pow(tmp1,2)
@write fColor (color1*specIntensity*tmp2)+(color2*ambIntensity*color3)
@end


@begin LightStepComponent BlinnPhong
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use matnormal
@use position
@use color
@use color1
@use color2
@define L:3 normalize(lPosition-position)
@define lambert:3 dot(normalize(matnormal),L)
@define V:3 normalize(-position)
@define H:3 L+V
@define tmp1:3 dot(normalize(matnormal),normalize(H))
@define specular:3 pow(tmp1,2)
@write fColor (color*diffIntensity*lambert)+(color1*specIntensity*specular)+(color2*ambIntensity)
@end

@begin LightStepComponent BlinnPhongAO
@param diffIntensity,specIntensity,ambIntensity,lPosition as PLight02
@use matnormal
@use position
@use color
@use color1
@use color2
@use color3
@define L:3 normalize(lPosition-position)
@define lambert:3 dot(normalize(matnormal),L)
@define V:3 normalize(-position)
@define H:3 L+V
@define tmp1:3 dot(normalize(matnormal),normalize(H))
@define specular:3 pow(tmp1,2)
@write fColor (color*diffIntensity*lambert)+(color1*specIntensity*specular)+(color2*ambIntensity*color3)
@end





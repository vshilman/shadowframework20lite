
test_sv4Drawer.js
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var vertexPositionAttribute 
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var textureCoordAttribute 
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var pMatrixUniform 
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var mvMatrixUniform 
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var samplerUniform 
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cubeVertexPositionBuffer  = new  Array  (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cubeVertexIndexBuffer  = new  Array  (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cubeVertexTextureCoordBuffer  = new  Array  (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var textures  = new  Array  (  )
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var pMatrix 
[VARIABLE_DECLARATION, LINE_OF_CODE] -------> var mvMatrix 
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var rAnglex  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var speedx  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var rAngley  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var speedy  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var zoom  = -8
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var lastTime  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var lastTime2  = 0
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var commands  = new  Array  (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var filter  = 0
[CONSTRUCTOR_DECLARATION] -------> function Test_sv4Drawer  (  )
[CLASS_DECLARATION] -------> Test_sv4Drawer . prototype =
[METHOD_DECLARATION] ------->  initShaders : function ( gl  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader2.fs" , "shaders /shader2.vs"  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. enableVertexAttribArray ( vertexPositionAttribute  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. enableVertexAttribArray ( textureCoordAttribute  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
[METHOD_DECLARATION] -------> , setMatrixUniforms : function ( gl  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
[METHOD_DECLARATION] -------> , initBuffers : function ( gl  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexPositionBuffer [ 1 ]  = 3
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexPositionBuffer [ 2 ]  = 24
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var textureCoords  = [ 0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0 ]
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexTextureCoordBuffer [ 1 ]  = 2
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexTextureCoordBuffer [ 2 ]  = 24
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexIndexBuffer [ 1 ]  = 1
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> cubeVertexIndexBuffer [ 2 ]  = 36
[METHOD_DECLARATION] -------> , initTexture : function ( gl  )
[FOR, ASSIGNMENT, LINE_OF_CODE] -------> for ( var i  = 0 ; i  < 3 ; i  ++  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> textures [ i  ]  = gl. createTexture (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var tex  = new  Image  (  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> tex.onload   =  function  (  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. NEAREST )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. NEAREST )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindTexture ( gl. TEXTURE_2D, textures [ 1 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindTexture ( gl. TEXTURE_2D, textures [ 2 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. generateMipmap ( gl. TEXTURE_2D )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindTexture ( gl. TEXTURE_2D, 0 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> tex.src   = "images /crate.gif" 
[METHOD_DECLARATION] -------> , drawScene : function ( gl  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. enable ( gl. DEPTH_TEST )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. cullFace ( gl. BACK )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. enable ( gl. CULL_FACE )
[CALL, LINE_OF_CODE] ------->  this.handleKeys  (  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. viewport ( 0, 0, 500, 500 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cx  =  Math.cos  ( rAnglex  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var sx  =  Math.sin  ( rAnglex  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var cy  =  Math.cos  ( rAngley  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var sy  =  Math.sin  ( rAngley  )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> pMatrix   = new Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> mvMatrix   = new Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. frontFace ( gl. CCW )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. activeTexture ( gl. TEXTURE0 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindTexture ( gl. TEXTURE_2D, textures [ filter  ] )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. uniform1i ( samplerUniform , 0 )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
[CALL, LINE_OF_CODE] ------->  this.setMatrixUniforms  ( gl  )
[OPENGL_CALL, LINE_OF_CODE] -------> gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
[CALL, LINE_OF_CODE] ------->  this.animate  (  )
[METHOD_DECLARATION] -------> , animate : function (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var timeNow  = new  Date  (  ) . getTime  (  )
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( lastTime !=0 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> rAnglex  + = speedx *elapsed *0.001
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> rAngley  + = speedy *elapsed *0.001
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> lastTime   = timeNow 
[METHOD_DECLARATION] -------> , handleKeys : function (  )
[VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> var timeNow  = new  Date  (  ) . getTime  (  )
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( lastTime2 !=0 )
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 0 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> zoom  + = 5*elapsed *0.001
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 1 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> zoom  - = 5*elapsed *0.001
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 2 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> speedx  - = 2*elapsed *0.001
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 3 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> speedx  + = 2*elapsed *0.001
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 4 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> speedy  - = 2*elapsed *0.001
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( commands [ 5 ] )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> speedy  + = 2*elapsed *0.001
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> lastTime2   = timeNow 
[METHOD_DECLARATION] -------> , setCommands : function ( e , value  )
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==65 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 0 ]  = value 
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==90 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 1 ]  = value 
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==38 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 2 ]  = value 
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==40 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 3 ]  = value 
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==37 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 4 ]  = value 
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==39 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> commands [ 5 ]  = value 
[METHOD_DECLARATION] -------> , keyPressed : function ( e  )
[IF, ASSIGNMENT, LINE_OF_CODE] ------->  if ( e.keyCode ==70 )
[VARIABLE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> filter   = filter ==2 ? 0 : ( filter +1 )
[CALL, LINE_OF_CODE] ------->  this.setCommands  ( e , true  )
[METHOD_DECLARATION] -------> , keyReleased : function ( e  )
[CALL, LINE_OF_CODE] ------->  this.setCommands  ( e , false  )

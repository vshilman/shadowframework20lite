
Test_sv1Drawer.java VS test_sv1Drawer.js
	public class Test_sv1Drawer  --->  		Test_sv1Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexColorAttribute      --->  		var vertexColorAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int[] triangleVertexPositionBuffer   = new  int  [ 3 ]   --->  		var triangleVertexPositionBuffer  = new  Array  (  )
	private int[] triangleVertexColorBuffer   = new  int  [ 3 ]   --->  		var triangleVertexColorBuffer  = new  Array  (  )
	private int[] squareVertexPositionBuffer   = new  int  [ 3 ]   --->  		var squareVertexPositionBuffer  = new  Array  (  )
	private int[] squareVertexColorBuffer   = new  int  [ 3 ]   --->  		var squareVertexColorBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader1.fs"  ,  "shaders  / shader1.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader1.fs" , "shaders /shader1.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexColorAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexColor"   )  --->  		vertexColorAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexColor"  )
	 gl . gl EnableVertexAttribArray (  vertexColorAttribute   )  --->  		gl. enableVertexAttribArray ( vertexColorAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	 public void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  triangleVertexPositionBuffer  , 0 )  --->  		triangleVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		0.0f,1.0f,0.0f,-1.0f,-1.0f,0.0f,1.0f,-1.0f,0.0f  --->  		var vertices  = [ 0.0,1.0,0.0,-1.0,-1.0,0.0,1.0,-1.0,0.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	triangleVertexPositionBuffer  [ 1 ]  = 3  --->  		triangleVertexPositionBuffer [ 1 ]  = 3
	triangleVertexPositionBuffer  [ 2 ]  = 3  --->  		triangleVertexPositionBuffer [ 2 ]  = 3
	 gl . gl GenBuffers ( 1,  triangleVertexColorBuffer  , 0 )  --->  		triangleVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexColorBuffer [ 0 ] )
	float[] colors   =;		1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f  --->  		var colors  = [ 1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors  ), gl. STATIC_DRAW )
	triangleVertexColorBuffer  [ 1 ]  = 4  --->  		triangleVertexColorBuffer [ 1 ]  = 4
	triangleVertexColorBuffer  [ 2 ]  = 3  --->  		triangleVertexColorBuffer [ 2 ]  = 3
	 gl . gl GenBuffers ( 1,  squareVertexPositionBuffer  , 0 )  --->  		squareVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexPositionBuffer [ 0 ] )
	float[] vertices2   =;		1.0f,1.0f,0.0f,-1.0f,1.0f,0.0f,1.0f,-1.0f,0.0f,-1.0f,-1.0f,0.0f  --->  		var vertices2  = [ 1.0,1.0,0.0,-1.0,1.0,0.0,1.0,-1.0,0.0,-1.0,-1.0,0.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices2  ), gl. STATIC_DRAW )
	squareVertexPositionBuffer  [ 1 ]  = 3  --->  		squareVertexPositionBuffer [ 1 ]  = 3
	squareVertexPositionBuffer  [ 2 ]  = 4  --->  		squareVertexPositionBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  squareVertexColorBuffer  , 0 )  --->  		squareVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexColorBuffer [ 0 ] )
	float[] colors2   = new  float  [ 16 ]   --->  		var colors2  = new  Array  (  )
	for ( int i   = 0 ; i   < 4 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 4 ; i  ++  )
	int c   =  i  <<2  --->  		var c  = i <<2
	colors2  [  c   ]  = 1  --->  		colors2 [ c  ]  = 1
	colors2  [  c  +1 ]  = 0.75f  --->  		colors2 [ c +1 ]  = 0.75
	colors2  [  c  +2 ]  = 0.8f  --->  		colors2 [ c +2 ]  = 0.8
	colors2  [  c  +3 ]  = 1  --->  		colors2 [ c +3 ]  = 1
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors2  ), gl. STATIC_DRAW )
	squareVertexColorBuffer  [ 1 ]  = 4  --->  		squareVertexColorBuffer [ 1 ]  = 4
	squareVertexColorBuffer  [ 2 ]  = 4  --->  		squareVertexColorBuffer [ 2 ]  = 4
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,4  --->  		pMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,4 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,-1.5f,0,0,1  --->  		mvMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,-1.5,0,0,1 ] )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  triangleVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , triangleVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  triangleVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , triangleVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLES, 0,  triangleVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLES, 0, triangleVertexPositionBuffer [ 2 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		mvMatrixv    = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,1.5f,0,0,1  --->  		mvMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,1.5,0,0,1 ] )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  squareVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , squareVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  squareVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , squareVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_STRIP, 0,  squareVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_STRIP, 0, squareVertexPositionBuffer [ 2 ] )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv2Drawer.java VS test_sv2Drawer.js
	public class Test_sv2Drawer  --->  		Test_sv2Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexColorAttribute      --->  		var vertexColorAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int[] pyramidVertexPositionBuffer   = new  int  [ 3 ]   --->  		var pyramidVertexPositionBuffer  = new  Array  (  )
	private int[] pyramidVertexColorBuffer   = new  int  [ 3 ]   --->  		var pyramidVertexColorBuffer  = new  Array  (  )
	private int[] baseVertexPositionBuffer   = new  int  [ 3 ]   --->  		var baseVertexPositionBuffer  = new  Array  (  )
	private int[] baseVertexColorBuffer   = new  int  [ 3 ]   --->  		var baseVertexColorBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAngle   = 0  --->  		var rAngle  = 0
	private long lastTime   = 0  --->  		var lastTime  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader1.fs"  ,  "shaders  / shader1.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader1.fs" , "shaders /shader1.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexColorAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexColor"   )  --->  		vertexColorAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexColor"  )
	 gl . gl EnableVertexAttribArray (  vertexColorAttribute   )  --->  		gl. enableVertexAttribArray ( vertexColorAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	 public void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  pyramidVertexPositionBuffer  , 0 )  --->  		pyramidVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		0.0f,1.0f,0.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f  --->  		var vertices  = [ 0.0,1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	pyramidVertexPositionBuffer  [ 1 ]  = 3  --->  		pyramidVertexPositionBuffer [ 1 ]  = 3
	pyramidVertexPositionBuffer  [ 2 ]  = 6  --->  		pyramidVertexPositionBuffer [ 2 ]  = 6
	 gl . gl GenBuffers ( 1,  pyramidVertexColorBuffer  , 0 )  --->  		pyramidVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexColorBuffer [ 0 ] )
	float[] colors   =;		1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f  --->  		var colors  = [ 1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors  ), gl. STATIC_DRAW )
	pyramidVertexColorBuffer  [ 1 ]  = 4  --->  		pyramidVertexColorBuffer [ 1 ]  = 4
	pyramidVertexColorBuffer  [ 2 ]  = 6  --->  		pyramidVertexColorBuffer [ 2 ]  = 6
	 gl . gl GenBuffers ( 1,  baseVertexPositionBuffer  , 0 )  --->  		baseVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexPositionBuffer [ 0 ] )
	float[] vertices2   =;		-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f  --->  		var vertices2  = [ -1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices2  ), gl. STATIC_DRAW )
	baseVertexPositionBuffer  [ 1 ]  = 3  --->  		baseVertexPositionBuffer [ 1 ]  = 3
	baseVertexPositionBuffer  [ 2 ]  = 4  --->  		baseVertexPositionBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  baseVertexColorBuffer  , 0 )  --->  		baseVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexColorBuffer [ 0 ] )
	float[] colors2   =;		0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f  --->  		var colors2  = [ 0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors2  ), gl. STATIC_DRAW )
	baseVertexColorBuffer  [ 1 ]  = 4  --->  		baseVertexColorBuffer [ 1 ]  = 4
	baseVertexColorBuffer  [ 2 ]  = 4  --->  		baseVertexColorBuffer [ 2 ]  = 4
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAngle   )  --->  		var cx  =  Math.cos  ( rAngle  )
	float sx   = ( float )  Math.sin   (  rAngle   )  --->  		var sx  =  Math.sin  ( rAngle  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cx  , sx  * sx  ,-cx* sx  ,0,0, cx  , sx  ,0, sx  ,-cx* sx  , cx  * cx  ,0,0,0,-8,1  --->  		mvMatrix   = new  Float32Array  ( [ cx ,sx *sx ,-cx*sx ,0,0,cx ,sx ,0,sx ,-cx*sx ,cx *cx ,0,0,0,-8,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  pyramidVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , pyramidVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  pyramidVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , pyramidVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_FAN, 0,  pyramidVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_FAN, 0, pyramidVertexPositionBuffer [ 2 ] )
	 gl . gl FrontFace ( GL2 .GL_ CW )  --->  		gl. frontFace ( gl. CW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  baseVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , baseVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  baseVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , baseVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_STRIP, 0,  baseVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_STRIP, 0, baseVertexPositionBuffer [ 2 ] )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAngle   + = 1.57* elapsed  *0.001  --->  		rAngle  + = 1.57*elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv3Drawer.java VS test_sv3Drawer.js
	public class Test_sv3Drawer  --->  		Test_sv3Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int[] cubeVertexPositionBuffer   = new  int  [ 3 ]   --->  		var cubeVertexPositionBuffer  = new  Array  (  )
	private int[] cubeVertexIndexBuffer   = new  int  [ 3 ]   --->  		var cubeVertexIndexBuffer  = new  Array  (  )
	private int[] cubeVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var cubeVertexTextureCoordBuffer  = new  Array  (  )
	private int[] texture1   = new  int  [ 1 ]   --->  		var texture1  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAngle   = 0  --->  		var rAngle  = 0
	private long lastTime   = 0  --->  		var lastTime  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader2.fs"  ,  "shaders  / shader2.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader2.fs" , "shaders /shader2.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )  --->  		textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  cubeVertexPositionBuffer  , 0 )  --->  		cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f  --->  		var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	cubeVertexPositionBuffer  [ 1 ]  = 3  --->  		cubeVertexPositionBuffer [ 1 ]  = 3
	cubeVertexPositionBuffer  [ 2 ]  = 24  --->  		cubeVertexPositionBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexTextureCoordBuffer  , 0 )  --->  		cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords   =;		0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f  --->  		var textureCoords  = [ 0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	cubeVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		cubeVertexTextureCoordBuffer [ 1 ]  = 2
	cubeVertexTextureCoordBuffer  [ 2 ]  = 24  --->  		cubeVertexTextureCoordBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexIndexBuffer  , 0 )  --->  		cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	short[] cubeVertexIndices   =;		0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23  --->  		var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  cubeVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
	cubeVertexIndexBuffer  [ 1 ]  = 1  --->  		cubeVertexIndexBuffer [ 1 ]  = 1
	cubeVertexIndexBuffer  [ 2 ]  = 36  --->  		cubeVertexIndexBuffer [ 2 ]  = 36
	 public void initTexture   ( GL2 gl   ) throws IOException    --->  		, initTexture : function ( gl  )
	 gl . gl GenTextures ( 1,  texture1  , 0 )  --->  		texture1 [ 0 ]  = gl. createTexture (  )
	TextureData tex   =   TextureIO.newTextureData   ( new  File   (  "images  / crate.gif"   ),  false  ,  null   )  --->  		var tex  = new  Image  (  );			tex.onload   =  function  (  );			tex.src   = "images /crate.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  texture1  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, texture1 [ 0 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. NEAREST )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. NEAREST )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )  --->  		gl. bindTexture ( gl. TEXTURE_2D, 0 )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAngle   )  --->  		var cx  =  Math.cos  ( rAngle  )
	float sx   = ( float )  Math.sin   (  rAngle   )  --->  		var sx  =  Math.sin  ( rAngle  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cx  * cx  , cx  * (  sx  * sx  + sx   ), sx  * sx  - cx  * cx  * sx  ,0,-cx* sx  , cx  * cx  - sx  * sx  * sx  , cx  * (  sx  * sx  + sx   ),0, sx  ,-cx* sx  , cx  * cx  ,0,0,0,-8,1  --->  		mvMatrix   = new  Float32Array  ( [ cx *cx ,cx *( sx *sx +sx  ),sx *sx -cx *cx *sx ,0,-cx*sx ,cx *cx -sx *sx *sx ,cx *( sx *sx +sx  ),0,sx ,-cx*sx ,cx *cx ,0,0,0,-8,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  cubeVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  cubeVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  texture1  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, texture1 [ 0 ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  cubeVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAngle   + = 1.57* elapsed  *0.001  --->  		rAngle  + = 1.57*elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv4Drawer.java VS test_sv4Drawer.js
	public class Test_sv4Drawer  --->  		Test_sv4Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int[] cubeVertexPositionBuffer   = new  int  [ 3 ]   --->  		var cubeVertexPositionBuffer  = new  Array  (  )
	private int[] cubeVertexIndexBuffer   = new  int  [ 3 ]   --->  		var cubeVertexIndexBuffer  = new  Array  (  )
	private int[] cubeVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var cubeVertexTextureCoordBuffer  = new  Array  (  )
	private int[] textures   = new  int  [ 3 ]   --->  		var textures  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAnglex   = 0  --->  		var rAnglex  = 0
	private float speedx   = 0  --->  		var speedx  = 0
	private double rAngley   = 0  --->  		var rAngley  = 0
	private float speedy   = 0  --->  		var speedy  = 0
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime   = 0  --->  		var lastTime  = 0
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	private int filter   = 0  --->  		var filter  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader2.fs"  ,  "shaders  / shader2.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader2.fs" , "shaders /shader2.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )  --->  		textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  cubeVertexPositionBuffer  , 0 )  --->  		cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f  --->  		var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	cubeVertexPositionBuffer  [ 1 ]  = 3  --->  		cubeVertexPositionBuffer [ 1 ]  = 3
	cubeVertexPositionBuffer  [ 2 ]  = 24  --->  		cubeVertexPositionBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexTextureCoordBuffer  , 0 )  --->  		cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords   =;		0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f  --->  		var textureCoords  = [ 0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	cubeVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		cubeVertexTextureCoordBuffer [ 1 ]  = 2
	cubeVertexTextureCoordBuffer  [ 2 ]  = 24  --->  		cubeVertexTextureCoordBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexIndexBuffer  , 0 )  --->  		cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	short[] cubeVertexIndices   =;		0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23  --->  		var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  cubeVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
	cubeVertexIndexBuffer  [ 1 ]  = 1  --->  		cubeVertexIndexBuffer [ 1 ]  = 1
	cubeVertexIndexBuffer  [ 2 ]  = 36  --->  		cubeVertexIndexBuffer [ 2 ]  = 36
	 public void initTexture   ( GL2 gl   ) throws IOException    --->  		, initTexture : function ( gl  )
	 gl . gl GenTextures ( 3,  textures  , 0 )  --->  		textures [ i  ]  = gl. createTexture (  );			for ( var i  = 0 ; i  < 3 ; i  ++  )
	TextureData tex   =   TextureIO.newTextureData   ( new  File   (  "images  / crate.gif"   ),  false  ,  null   )  --->  		var tex  = new  Image  (  );			tex.onload   =  function  (  );			tex.src   = "images /crate.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. NEAREST )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. NEAREST )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 1 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 1 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 2 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 2 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )  --->  		gl. bindTexture ( gl. TEXTURE_2D, 0 )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0, zoom  ,1  --->  		mvMatrix   = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  cubeVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  cubeVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [  filter   ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ filter  ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  cubeVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAnglex   + =  speedx  * elapsed  *0.001  --->  		rAnglex  + = speedx *elapsed *0.001
	rAngley   + =  speedy  * elapsed  *0.001  --->  		rAngley  + = speedy *elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	 if ( commands  [ 2 ] )  --->  		 if ( commands [ 2 ] )
	speedx   - = 2* elapsed  *0.001  --->  		speedx  - = 2*elapsed *0.001
	 if ( commands  [ 3 ] )  --->  		 if ( commands [ 3 ] )
	speedx   + = 2* elapsed  *0.001  --->  		speedx  + = 2*elapsed *0.001
	 if ( commands  [ 4 ] )  --->  		 if ( commands [ 4 ] )
	speedy   - = 2* elapsed  *0.001  --->  		speedy  - = 2*elapsed *0.001
	 if ( commands  [ 5 ] )  --->  		 if ( commands [ 5 ] )
	speedy   + = 2* elapsed  *0.001  --->  		speedy  + = 2*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 if (   e.getKeyCode   (  )==38 )  --->  		 if ( e.keyCode ==38 )
	commands  [ 2 ]  =  value    --->  		commands [ 2 ]  = value 
	 if (   e.getKeyCode   (  )==40 )  --->  		 if ( e.keyCode ==40 )
	commands  [ 3 ]  =  value    --->  		commands [ 3 ]  = value 
	 if (   e.getKeyCode   (  )==37 )  --->  		 if ( e.keyCode ==37 )
	commands  [ 4 ]  =  value    --->  		commands [ 4 ]  = value 
	 if (   e.getKeyCode   (  )==39 )  --->  		 if ( e.keyCode ==39 )
	commands  [ 5 ]  =  value    --->  		commands [ 5 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	 if (   e.getKeyCode   (  )==70 )  --->  		 if ( e.keyCode ==70 )
	filter    = filter  ==2 ? 0 :  (  filter  +1 )  --->  		filter   = filter ==2 ? 0 : ( filter +1 )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv5Drawer.java VS test_sv5Drawer.js
	public class Test_sv5Drawer  --->  		Test_sv5Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int[] cubeVertexPositionBuffer   = new  int  [ 3 ]   --->  		var cubeVertexPositionBuffer  = new  Array  (  )
	private int[] cubeVertexIndexBuffer   = new  int  [ 3 ]   --->  		var cubeVertexIndexBuffer  = new  Array  (  )
	private int[] cubeVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var cubeVertexTextureCoordBuffer  = new  Array  (  )
	private int[] textures   = new  int  [ 3 ]   --->  		var textures  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAnglex   = 0  --->  		var rAnglex  = 0
	private float speedx   = 0  --->  		var speedx  = 0
	private double rAngley   = 0  --->  		var rAngley  = 0
	private float speedy   = 0  --->  		var speedy  = 0
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime   = 0  --->  		var lastTime  = 0
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	private int wrapper   = 0  --->  		var wrapper  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader2.fs"  ,  "shaders  / shader2.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader2.fs" , "shaders /shader2.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )  --->  		textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  cubeVertexPositionBuffer  , 0 )  --->  		cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f  --->  		var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	cubeVertexPositionBuffer  [ 1 ]  = 3  --->  		cubeVertexPositionBuffer [ 1 ]  = 3
	cubeVertexPositionBuffer  [ 2 ]  = 24  --->  		cubeVertexPositionBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexTextureCoordBuffer  , 0 )  --->  		cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords   =;		-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,-1.0f,2.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f  --->  		var textureCoords  = [ -1.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0,2.0,-1.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,-1.0,2.0,-1.0,-1.0,2.0,-1.0,2.0,2.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,-1.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	cubeVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		cubeVertexTextureCoordBuffer [ 1 ]  = 2
	cubeVertexTextureCoordBuffer  [ 2 ]  = 24  --->  		cubeVertexTextureCoordBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexIndexBuffer  , 0 )  --->  		cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	short[] cubeVertexIndices   =;		0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23  --->  		var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  cubeVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
	cubeVertexIndexBuffer  [ 1 ]  = 1  --->  		cubeVertexIndexBuffer [ 1 ]  = 1
	cubeVertexIndexBuffer  [ 2 ]  = 36  --->  		cubeVertexIndexBuffer [ 2 ]  = 36
	 public void initTexture   ( GL2 gl   ) throws IOException    --->  		, initTexture : function ( gl  )
	 gl . gl GenTextures ( 3,  textures  , 0 )  --->  		textures [ i  ]  = gl. createTexture (  );			for ( var i  = 0 ; i  < 3 ; i  ++  )
	TextureData tex   =   TextureIO.newTextureData   ( new  File   (  "images  / roof.gif"   ),  false  ,  null   )  --->  		var tex  = new  Image  (  );			tex.onload   =  function  (  );			tex.src   = "images /roof.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. REPEAT )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. REPEAT )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 1 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 1 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ MIRRORED_REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. MIRRORED_REPEAT )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ MIRRORED_REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. MIRRORED_REPEAT )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 2 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 2 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ CLAMP_TO_EDGE )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. CLAMP_TO_EDGE )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ CLAMP_TO_EDGE )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. CLAMP_TO_EDGE )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )  --->  		gl. bindTexture ( gl. TEXTURE_2D, 0 )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0, zoom  ,1  --->  		mvMatrix   = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  cubeVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  cubeVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [  wrapper   ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ wrapper  ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  cubeVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAnglex   + =  speedx  * elapsed  *0.001  --->  		rAnglex  + = speedx *elapsed *0.001
	rAngley   + =  speedy  * elapsed  *0.001  --->  		rAngley  + = speedy *elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	 if ( commands  [ 2 ] )  --->  		 if ( commands [ 2 ] )
	speedx   - = 2* elapsed  *0.001  --->  		speedx  - = 2*elapsed *0.001
	 if ( commands  [ 3 ] )  --->  		 if ( commands [ 3 ] )
	speedx   + = 2* elapsed  *0.001  --->  		speedx  + = 2*elapsed *0.001
	 if ( commands  [ 4 ] )  --->  		 if ( commands [ 4 ] )
	speedy   - = 2* elapsed  *0.001  --->  		speedy  - = 2*elapsed *0.001
	 if ( commands  [ 5 ] )  --->  		 if ( commands [ 5 ] )
	speedy   + = 2* elapsed  *0.001  --->  		speedy  + = 2*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 if (   e.getKeyCode   (  )==38 )  --->  		 if ( e.keyCode ==38 )
	commands  [ 2 ]  =  value    --->  		commands [ 2 ]  = value 
	 if (   e.getKeyCode   (  )==40 )  --->  		 if ( e.keyCode ==40 )
	commands  [ 3 ]  =  value    --->  		commands [ 3 ]  = value 
	 if (   e.getKeyCode   (  )==37 )  --->  		 if ( e.keyCode ==37 )
	commands  [ 4 ]  =  value    --->  		commands [ 4 ]  = value 
	 if (   e.getKeyCode   (  )==39 )  --->  		 if ( e.keyCode ==39 )
	commands  [ 5 ]  =  value    --->  		commands [ 5 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	 if (   e.getKeyCode   (  )==87 )  --->  		 if ( e.keyCode ==87 )
	wrapper    = wrapper  ==2 ? 0 :  (  wrapper  +1 )  --->  		wrapper   = wrapper ==2 ? 0 : ( wrapper +1 )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv6Drawer.java VS test_sv6Drawer.js
	public class Test_sv6Drawer  --->  		Test_sv6Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexNormalAttribute      --->  		var vertexNormalAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int nMatrixUniform      --->  		var nMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int ambientColorUniform      --->  		var ambientColorUniform 
	private int lightingDirectionUniform      --->  		var lightingDirectionUniform 
	private int directionalColorUniform      --->  		var directionalColorUniform 
	private int[] cubeVertexPositionBuffer   = new  int  [ 3 ]   --->  		var cubeVertexPositionBuffer  = new  Array  (  )
	private int[] cubeVertexNormalBuffer   = new  int  [ 3 ]   --->  		var cubeVertexNormalBuffer  = new  Array  (  )
	private int[] cubeVertexIndexBuffer   = new  int  [ 3 ]   --->  		var cubeVertexIndexBuffer  = new  Array  (  )
	private int[] cubeVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var cubeVertexTextureCoordBuffer  = new  Array  (  )
	private int[] textures   = new  int  [ 1 ]   --->  		var textures  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private FloatBuffer normalMatrix      --->  		var normalMatrix 
	private double rAnglex   = 0  --->  		var rAnglex  = 0
	private float speedx   = 0  --->  		var speedx  = 0
	private double rAngley   = 0  --->  		var rAngley  = 0
	private float speedy   = 0  --->  		var speedy  = 0
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime   = 0  --->  		var lastTime  = 0
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader3.fs"  ,  "shaders  / shader3.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader3.fs" , "shaders /shader3.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexNormalAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexNormal"   )  --->  		vertexNormalAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexNormal"  )
	 gl . gl EnableVertexAttribArray (  vertexNormalAttribute   )  --->  		gl. enableVertexAttribArray ( vertexNormalAttribute  )
	textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )  --->  		textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	nMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uNMatrix"   )  --->  		nMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uNMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	ambientColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uAmbientColor"   )  --->  		ambientColorUniform   = gl. getUniformLocation ( shaderProgram , "uAmbientColor"  )
	lightingDirectionUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uLightingDirection"   )  --->  		lightingDirectionUniform   = gl. getUniformLocation ( shaderProgram , "uLightingDirection"  )
	directionalColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uDirectionalColor"   )  --->  		directionalColorUniform   = gl. getUniformLocation ( shaderProgram , "uDirectionalColor"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 gl . gl UniformMatrix3fv (  nMatrixUniform  , 9,  false  ,  normalMatrix   )  --->  		gl. uniformMatrix3fv ( nMatrixUniform , false , normalMatrix  )
	 gl . gl Uniform3f (  ambientColorUniform  , 0.1f, 0.1f, 0.1f )  --->  		gl. uniform3f ( ambientColorUniform , 0.1, 0.1, 0.1 )
	FloatBuffer lightingDirection   =   BufferUtil.newFloatBuffer   (  lightingDirectionv   );		float[] lightingDirectionv   = new  float  [  ] ;		0.57735026918962576450914878050196f,0.57735026918962576450914878050196f,0.57735026918962576450914878050196f  --->  		var lightingDirection  = new  Float32Array  ( [ 0.57735026918962576450914878050196,0.57735026918962576450914878050196,0.57735026918962576450914878050196 ] )
	 gl . gl Uniform3fv (  lightingDirectionUniform  ,  lightingDirectionv.length  ,  lightingDirection   )  --->  		gl. uniform3fv ( lightingDirectionUniform , lightingDirection  )
	 gl . gl Uniform3f (  directionalColorUniform  , 0.7f, 0.7f, 0.7f )  --->  		gl. uniform3f ( directionalColorUniform , 0.7, 0.7, 0.7 )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  cubeVertexPositionBuffer  , 0 )  --->  		cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f  --->  		var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	cubeVertexPositionBuffer  [ 1 ]  = 3  --->  		cubeVertexPositionBuffer [ 1 ]  = 3
	cubeVertexPositionBuffer  [ 2 ]  = 24  --->  		cubeVertexPositionBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexNormalBuffer  , 0 )  --->  		cubeVertexNormalBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexNormalBuffer [ 0 ] )
	float[] normals   =;		0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,-1.0f,0.0f,0.0f  --->  		var normals  = [ 0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  normals.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  normals   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( normals  ), gl. STATIC_DRAW )
	cubeVertexNormalBuffer  [ 1 ]  = 3  --->  		cubeVertexNormalBuffer [ 1 ]  = 3
	cubeVertexNormalBuffer  [ 2 ]  = 24  --->  		cubeVertexNormalBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexTextureCoordBuffer  , 0 )  --->  		cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords   =;		-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,-1.0f,2.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f,-1.0f,-1.0f,-1.0f,-1.0f,2.0f,-1.0f,2.0f,2.0f,-1.0f,2.0f  --->  		var textureCoords  = [ -1.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0,2.0,-1.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,-1.0,2.0,-1.0,-1.0,2.0,-1.0,2.0,2.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,2.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0,-1.0,-1.0,-1.0,-1.0,2.0,-1.0,2.0,2.0,-1.0,2.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	cubeVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		cubeVertexTextureCoordBuffer [ 1 ]  = 2
	cubeVertexTextureCoordBuffer  [ 2 ]  = 24  --->  		cubeVertexTextureCoordBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexIndexBuffer  , 0 )  --->  		cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	short[] cubeVertexIndices   =;		0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23  --->  		var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  cubeVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
	cubeVertexIndexBuffer  [ 1 ]  = 1  --->  		cubeVertexIndexBuffer [ 1 ]  = 1
	cubeVertexIndexBuffer  [ 2 ]  = 36  --->  		cubeVertexIndexBuffer [ 2 ]  = 36
	 public void initTexture   ( GL2 gl   ) throws IOException    --->  		, initTexture : function ( gl  )
	 gl . gl GenTextures ( 1,  textures  , 0 )  --->  		textures [ 0 ]  = gl. createTexture (  )
	TextureData tex   =   TextureIO.newTextureData   ( new  File   (  "images  / muro.gif"   ),  false  ,  null   )  --->  		var tex  = new  Image  (  );			tex.onload   =  function  (  );			tex.src   = "images /muro.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. REPEAT )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. REPEAT )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )  --->  		gl. bindTexture ( gl. TEXTURE_2D, 0 )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	float[] mvMatrixv   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0, zoom  ,1  --->  		var mvMatrixv  = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   )  --->  		mvMatrix   = mvMatrixv 
	float[] normalMatrixv   = new  float  [ 9 ]   --->  		var normalMatrixv  = new  Float32Array  ( 9 )
	for ( int i   = 0 ; i   < 3 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 3 ; i  ++  )
	for ( int j   = 0 ; j   < 3 ; j   ++  )  --->  		for ( var j  = 0 ; j  < 3 ; j  ++  )
	normalMatrixv  [  i  +3* j   ]  =  mvMatrixv  [  i  +4* j   ]  --->  		normalMatrixv [ i +3*j  ]  = mvMatrixv [ i +4*j  ]
	normalMatrix    =   BufferUtil.newFloatBuffer   (  normalMatrixv   )  --->  		normalMatrix   = normalMatrixv 
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  cubeVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexNormalBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexNormalAttribute  ,  cubeVertexNormalBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexNormalAttribute , cubeVertexNormalBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  cubeVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  cubeVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAnglex   + =  speedx  * elapsed  *0.001  --->  		rAnglex  + = speedx *elapsed *0.001
	rAngley   + =  speedy  * elapsed  *0.001  --->  		rAngley  + = speedy *elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	 if ( commands  [ 2 ] )  --->  		 if ( commands [ 2 ] )
	speedx   - = 2* elapsed  *0.001  --->  		speedx  - = 2*elapsed *0.001
	 if ( commands  [ 3 ] )  --->  		 if ( commands [ 3 ] )
	speedx   + = 2* elapsed  *0.001  --->  		speedx  + = 2*elapsed *0.001
	 if ( commands  [ 4 ] )  --->  		 if ( commands [ 4 ] )
	speedy   - = 2* elapsed  *0.001  --->  		speedy  - = 2*elapsed *0.001
	 if ( commands  [ 5 ] )  --->  		 if ( commands [ 5 ] )
	speedy   + = 2* elapsed  *0.001  --->  		speedy  + = 2*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 if (   e.getKeyCode   (  )==38 )  --->  		 if ( e.keyCode ==38 )
	commands  [ 2 ]  =  value    --->  		commands [ 2 ]  = value 
	 if (   e.getKeyCode   (  )==40 )  --->  		 if ( e.keyCode ==40 )
	commands  [ 3 ]  =  value    --->  		commands [ 3 ]  = value 
	 if (   e.getKeyCode   (  )==37 )  --->  		 if ( e.keyCode ==37 )
	commands  [ 4 ]  =  value    --->  		commands [ 4 ]  = value 
	 if (   e.getKeyCode   (  )==39 )  --->  		 if ( e.keyCode ==39 )
	commands  [ 5 ]  =  value    --->  		commands [ 5 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv7Drawer.java VS test_sv7Drawer.js
	public class Test_sv7Drawer  --->  		Test_sv7Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexNormalAttribute      --->  		var vertexNormalAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int nMatrixUniform      --->  		var nMatrixUniform 
	private int ambientColorUniform      --->  		var ambientColorUniform 
	private int pointLightingLocationUniform      --->  		var pointLightingLocationUniform 
	private int pointLightingColorUniform      --->  		var pointLightingColorUniform 
	private int shaderUniform      --->  		var shaderUniform 
	private int shaderChoice   = 0  --->  		var shaderChoice  = 0
	private int[] sphereVertexPositionBuffer   = new  int  [ 3 ]   --->  		var sphereVertexPositionBuffer  = new  Array  (  )
	private int[] sphereVertexNormalBuffer   = new  int  [ 3 ]   --->  		var sphereVertexNormalBuffer  = new  Array  (  )
	private int[] sphereVertexIndexBuffer   = new  int  [ 3 ]   --->  		var sphereVertexIndexBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private FloatBuffer normalMatrix      --->  		var normalMatrix 
	private double rAnglex   = 0  --->  		var rAnglex  = 0
	private float speedx   = 0  --->  		var speedx  = 0
	private double rAngley   = 0  --->  		var rAngley  = 0
	private float speedy   = 0  --->  		var speedy  = 0
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime   = 0  --->  		var lastTime  = 0
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader4.fs"  ,  "shaders  / shader4.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader4.fs" , "shaders /shader4.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexNormalAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexNormal"   )  --->  		vertexNormalAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexNormal"  )
	 gl . gl EnableVertexAttribArray (  vertexNormalAttribute   )  --->  		gl. enableVertexAttribArray ( vertexNormalAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	nMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uNMatrix"   )  --->  		nMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uNMatrix"  )
	ambientColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uAmbientColor"   )  --->  		ambientColorUniform   = gl. getUniformLocation ( shaderProgram , "uAmbientColor"  )
	pointLightingLocationUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingLocation"   )  --->  		pointLightingLocationUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingLocation"  )
	pointLightingColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingColor"   )  --->  		pointLightingColorUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingColor"  )
	shaderUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uShader"   )  --->  		shaderUniform   = gl. getUniformLocation ( shaderProgram , "uShader"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 gl . gl UniformMatrix3fv (  nMatrixUniform  , 9,  false  ,  normalMatrix   )  --->  		gl. uniformMatrix3fv ( nMatrixUniform , false , normalMatrix  )
	 gl . gl Uniform3f (  ambientColorUniform  , 0.1f, 0.1f, 0.1f )  --->  		gl. uniform3f ( ambientColorUniform , 0.1, 0.1, 0.1 )
	 gl . gl Uniform3f (  pointLightingLocationUniform  , 0, 0, -5.1f )  --->  		gl. uniform3f ( pointLightingLocationUniform , 0, 0, -5.1 )
	 gl . gl Uniform3f (  pointLightingColorUniform  , 0.7f, 0.7f, 0.7f )  --->  		gl. uniform3f ( pointLightingColorUniform , 0.7, 0.7, 0.7 )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	int latitudeBands   = 15  --->  		var latitudeBands  = 15
	int longitudeBands   = 15  --->  		var longitudeBands  = 15
	int radius   = 2  --->  		var radius  = 2
	float[] vertices   = new  float  [ 3* (  latitudeBands  +1 )* (  longitudeBands  +1 ) ]   --->  		var vertices  = new  Array  (  )
	float[] normals   = new  float  [ 3* (  latitudeBands  +1 )* (  longitudeBands  +1 ) ]   --->  		var normals  = new  Array  (  )
	short[] sphereVertexIndices   = new  short  [ 6* latitudeBands  * longitudeBands   ]   --->  		var sphereVertexIndices  = new  Array  (  )
	for ( int i   = 0 ; i   <=  latitudeBands   ; i   ++  )  --->  		for ( var i  = 0 ; i  <= latitudeBands  ; i  ++  )
	float theta   = ( float ) (  i  * Math.PI  / latitudeBands   )  --->  		var theta  = i *Math.PI /latitudeBands 
	float sinTheta   = ( float )  Math.sin   (  theta   )  --->  		var sinTheta  =  Math.sin  ( theta  )
	float cosTheta   = ( float )  Math.cos   (  theta   )  --->  		var cosTheta  =  Math.cos  ( theta  )
	for ( int j   = 0 ; j   <=  longitudeBands   ; j   ++  )  --->  		for ( var j  = 0 ; j  <= longitudeBands  ; j  ++  )
	float phi   = ( float ) (  j  *2* Math.PI  / longitudeBands   )  --->  		var phi  = ( j *2*Math.PI /longitudeBands  )
	float sinPhi   = ( float )  Math.sin   (  phi   )  --->  		var sinPhi  =  Math.sin  ( phi  )
	float cosPhi   = ( float )  Math.cos   (  phi   )  --->  		var cosPhi  =  Math.cos  ( phi  )
	float x   =  cosPhi  * sinTheta    --->  		var x  = cosPhi *sinTheta 
	float y   =  cosTheta    --->  		var y  = cosTheta 
	float z   =  sinPhi  * sinTheta    --->  		var z  = sinPhi *sinTheta 
	int index   = 3* (  j  + i  * (  longitudeBands  +1 ) )  --->  		var index  = 3*( j +i *( longitudeBands +1 ) )
	vertices  [  index   ]  =  radius  * x    --->  		vertices [ index  ]  = radius *x 
	vertices  [  index  +1 ]  =  radius  * y    --->  		vertices [ index +1 ]  = radius *y 
	vertices  [  index  +2 ]  =  radius  * z    --->  		vertices [ index +2 ]  = radius *z 
	normals  [  index   ]  =  x    --->  		normals [ index  ]  = x 
	normals  [  index  +1 ]  =  y    --->  		normals [ index +1 ]  = y 
	normals  [  index  +2 ]  =  z    --->  		normals [ index +2 ]  = z 
	for ( int i   = 0 ; i   <  latitudeBands   ; i   ++  )  --->  		for ( var i  = 0 ; i  < latitudeBands  ; i  ++  )
	for ( int j   = 0 ; j   <  longitudeBands   ; j   ++  )  --->  		for ( var j  = 0 ; j  < longitudeBands  ; j  ++  )
	short first   = ( short ) (  (  i  * (  longitudeBands  +1 ) )+ j   )  --->  		var first  = ( i *( longitudeBands +1 ) )+j 
	short second   = ( short ) (  first  + longitudeBands  +1 )  --->  		var second  = first +longitudeBands +1
	int index   = 6* (  j  + i  * longitudeBands   )  --->  		var index  = 6*( j +i *longitudeBands  )
	sphereVertexIndices  [  index   ]  =  first    --->  		sphereVertexIndices [ index  ]  = first 
	sphereVertexIndices  [  index  +1 ]  =  second    --->  		sphereVertexIndices [ index +1 ]  = second 
	sphereVertexIndices  [  index  +2 ]  = ( short ) (  first  +1 )  --->  		sphereVertexIndices [ index +2 ]  = first +1
	sphereVertexIndices  [  index  +3 ]  =  second    --->  		sphereVertexIndices [ index +3 ]  = second 
	sphereVertexIndices  [  index  +4 ]  = ( short ) (  second  +1 )  --->  		sphereVertexIndices [ index +4 ]  = second +1
	sphereVertexIndices  [  index  +5 ]  = ( short ) (  first  +1 )  --->  		sphereVertexIndices [ index +5 ]  = first +1
	 gl . gl GenBuffers ( 1,  sphereVertexPositionBuffer  , 0 )  --->  		sphereVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexPositionBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	sphereVertexPositionBuffer  [ 1 ]  = 3  --->  		sphereVertexPositionBuffer [ 1 ]  = 3
	sphereVertexPositionBuffer  [ 2 ]  =  vertices.length  /3  --->  		sphereVertexPositionBuffer [ 2 ]  = vertices.length /3
	 gl . gl GenBuffers ( 1,  sphereVertexNormalBuffer  , 0 )  --->  		sphereVertexNormalBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexNormalBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  normals.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  normals   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( normals  ), gl. STATIC_DRAW )
	sphereVertexNormalBuffer  [ 1 ]  = 3  --->  		sphereVertexNormalBuffer [ 1 ]  = 3
	sphereVertexNormalBuffer  [ 2 ]  =  normals.length  /3  --->  		sphereVertexNormalBuffer [ 2 ]  = normals.length /3
	 gl . gl GenBuffers ( 1,  sphereVertexIndexBuffer  , 0 )  --->  		sphereVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, sphereVertexIndexBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  sphereVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( sphereVertexIndices  ), gl. STATIC_DRAW )
	sphereVertexIndexBuffer  [ 1 ]  = 1  --->  		sphereVertexIndexBuffer [ 1 ]  = 1
	sphereVertexIndexBuffer  [ 2 ]  =  sphereVertexIndices.length    --->  		sphereVertexIndexBuffer [ 2 ]  = sphereVertexIndices.length 
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	 gl . gl Uniform1i (  shaderUniform  ,  shaderChoice   )  --->  		gl. uniform1i ( shaderUniform , shaderChoice  )
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	float[] mvMatrixv   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0, zoom  ,1  --->  		var mvMatrixv  = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   )  --->  		mvMatrix   = mvMatrixv 
	float[] normalMatrixv   = new  float  [ 9 ]   --->  		var normalMatrixv  = new  Float32Array  ( 9 )
	for ( int i   = 0 ; i   < 3 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 3 ; i  ++  )
	for ( int j   = 0 ; j   < 3 ; j   ++  )  --->  		for ( var j  = 0 ; j  < 3 ; j  ++  )
	normalMatrixv  [  i  +3* j   ]  =  mvMatrixv  [  i  +4* j   ]  --->  		normalMatrixv [ i +3*j  ]  = mvMatrixv [ i +4*j  ]
	normalMatrix    =   BufferUtil.newFloatBuffer   (  normalMatrixv   )  --->  		normalMatrix   = normalMatrixv 
	 gl . gl FrontFace ( GL2 .GL_ CW )  --->  		gl. frontFace ( gl. CW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  sphereVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , sphereVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexNormalBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexNormalAttribute  ,  sphereVertexNormalBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexNormalAttribute , sphereVertexNormalBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, sphereVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  sphereVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, sphereVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAnglex   + =  speedx  * elapsed  *0.001  --->  		rAnglex  + = speedx *elapsed *0.001
	rAngley   + =  speedy  * elapsed  *0.001  --->  		rAngley  + = speedy *elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	 if ( commands  [ 2 ] )  --->  		 if ( commands [ 2 ] )
	speedx   - = 2* elapsed  *0.001  --->  		speedx  - = 2*elapsed *0.001
	 if ( commands  [ 3 ] )  --->  		 if ( commands [ 3 ] )
	speedx   + = 2* elapsed  *0.001  --->  		speedx  + = 2*elapsed *0.001
	 if ( commands  [ 4 ] )  --->  		 if ( commands [ 4 ] )
	speedy   - = 2* elapsed  *0.001  --->  		speedy  - = 2*elapsed *0.001
	 if ( commands  [ 5 ] )  --->  		 if ( commands [ 5 ] )
	speedy   + = 2* elapsed  *0.001  --->  		speedy  + = 2*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 if (   e.getKeyCode   (  )==38 )  --->  		 if ( e.keyCode ==38 )
	commands  [ 2 ]  =  value    --->  		commands [ 2 ]  = value 
	 if (   e.getKeyCode   (  )==40 )  --->  		 if ( e.keyCode ==40 )
	commands  [ 3 ]  =  value    --->  		commands [ 3 ]  = value 
	 if (   e.getKeyCode   (  )==37 )  --->  		 if ( e.keyCode ==37 )
	commands  [ 4 ]  =  value    --->  		commands [ 4 ]  = value 
	 if (   e.getKeyCode   (  )==39 )  --->  		 if ( e.keyCode ==39 )
	commands  [ 5 ]  =  value    --->  		commands [ 5 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	 if (   e.getKeyCode   (  )==83 )  --->  		 if ( e.keyCode ==83 )
	shaderChoice    = shaderChoice  ==1 ? 0 :  (  shaderChoice  +1 )  --->  		shaderChoice   = shaderChoice ==1 ? 0 : ( shaderChoice +1 )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv8Drawer.java VS test_sv8Drawer.js
	public class Test_sv8Drawer  --->  		Test_sv8Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexNormalAttribute      --->  		var vertexNormalAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int nMatrixUniform      --->  		var nMatrixUniform 
	private int ambientColorUniform      --->  		var ambientColorUniform 
	private int pointLightingLocationUniform      --->  		var pointLightingLocationUniform 
	private int pointLightingSpecularColorUniform      --->  		var pointLightingSpecularColorUniform 
	private int pointLightingDiffuseColorUniform      --->  		var pointLightingDiffuseColorUniform 
	private int materialShininessUniform      --->  		var materialShininessUniform 
	private int[] teapotVertexPositionBuffer   = new  int  [ 3 ]   --->  		var teapotVertexPositionBuffer  = new  Array  (  )
	private int[] teapotVertexNormalBuffer   = new  int  [ 3 ]   --->  		var teapotVertexNormalBuffer  = new  Array  (  )
	private int[] teapotVertexIndexBuffer   = new  int  [ 3 ]   --->  		var teapotVertexIndexBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private FloatBuffer normalMatrix      --->  		var normalMatrix 
	private double rAnglex   = 0  --->  		var rAnglex  = 0
	private float speedx   = 0  --->  		var speedx  = 0
	private double rAngley   = 0  --->  		var rAngley  = 0
	private float speedy   = 0  --->  		var speedy  = 0
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime   = 0  --->  		var lastTime  = 0
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader5.fs"  ,  "shaders  / shader5.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader5.fs" , "shaders /shader5.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexNormalAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexNormal"   )  --->  		vertexNormalAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexNormal"  )
	 gl . gl EnableVertexAttribArray (  vertexNormalAttribute   )  --->  		gl. enableVertexAttribArray ( vertexNormalAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	nMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uNMatrix"   )  --->  		nMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uNMatrix"  )
	ambientColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uAmbientColor"   )  --->  		ambientColorUniform   = gl. getUniformLocation ( shaderProgram , "uAmbientColor"  )
	pointLightingLocationUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingLocation"   )  --->  		pointLightingLocationUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingLocation"  )
	pointLightingSpecularColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingSpecularColor"   )  --->  		pointLightingSpecularColorUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingSpecularColor"  )
	pointLightingDiffuseColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingDiffuseColor"   )  --->  		pointLightingDiffuseColorUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingDiffuseColor"  )
	materialShininessUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMaterialShininess"   )  --->  		materialShininessUniform   = gl. getUniformLocation ( shaderProgram , "uMaterialShininess"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 gl . gl UniformMatrix3fv (  nMatrixUniform  , 9,  false  ,  normalMatrix   )  --->  		gl. uniformMatrix3fv ( nMatrixUniform , false , normalMatrix  )
	 gl . gl Uniform3f (  ambientColorUniform  , 0.1f, 0.1f, 0.1f )  --->  		gl. uniform3f ( ambientColorUniform , 0.1, 0.1, 0.1 )
	 gl . gl Uniform3f (  pointLightingLocationUniform  , -1, 0, -5.1f )  --->  		gl. uniform3f ( pointLightingLocationUniform , -1, 0, -5.1 )
	 gl . gl Uniform3f (  pointLightingDiffuseColorUniform  , 0.7f, 0.7f, 0.7f )  --->  		gl. uniform3f ( pointLightingDiffuseColorUniform , 0.7, 0.7, 0.7 )
	 gl . gl Uniform3f (  pointLightingSpecularColorUniform  , 0.7f, 0.7f, 0.7f )  --->  		gl. uniform3f ( pointLightingSpecularColorUniform , 0.7, 0.7, 0.7 )
	 gl . gl Uniform1f (  materialShininessUniform  , 10 )  --->  		gl. uniform1f ( materialShininessUniform , 10 )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	ObjModel teapot   =   Util.loadObj   (  "models  / teapot.obj"   )  --->  		var teapot  =  loadObj  ( "models /teapot.obj"  )
	 gl . gl GenBuffers ( 1,  teapotVertexPositionBuffer  , 0 )  --->  		teapotVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  teapotVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, teapotVertexPositionBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  teapot.vertexPositions.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  teapot.vertexPositions   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( teapot.vertexPositions  ), gl. STATIC_DRAW )
	teapotVertexPositionBuffer  [ 1 ]  = 3  --->  		teapotVertexPositionBuffer [ 1 ]  = 3
	teapotVertexPositionBuffer  [ 2 ]  =  teapot.vertexPositions.length  /3  --->  		teapotVertexPositionBuffer [ 2 ]  = teapot.vertexPositions.length /3
	 gl . gl GenBuffers ( 1,  teapotVertexNormalBuffer  , 0 )  --->  		teapotVertexNormalBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  teapotVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, teapotVertexNormalBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  teapot.vertexNormals.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  teapot.vertexNormals   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( teapot.vertexNormals  ), gl. STATIC_DRAW )
	teapotVertexNormalBuffer  [ 1 ]  = 3  --->  		teapotVertexNormalBuffer [ 1 ]  = 3
	teapotVertexNormalBuffer  [ 2 ]  =  teapot.vertexNormals.length  /3  --->  		teapotVertexNormalBuffer [ 2 ]  = teapot.vertexNormals.length /3
	 gl . gl GenBuffers ( 1,  teapotVertexIndexBuffer  , 0 )  --->  		teapotVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  teapotVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, teapotVertexIndexBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  teapot.indices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  teapot.indices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( teapot.indices  ), gl. STATIC_DRAW )
	teapotVertexIndexBuffer  [ 1 ]  = 1  --->  		teapotVertexIndexBuffer [ 1 ]  = 1
	teapotVertexIndexBuffer  [ 2 ]  =  teapot.indices.length    --->  		teapotVertexIndexBuffer [ 2 ]  = teapot.indices.length 
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	float[] mvMatrixv   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0, zoom  ,1  --->  		var mvMatrixv  = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,zoom ,1 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   )  --->  		mvMatrix   = mvMatrixv 
	float[] normalMatrixv   = new  float  [ 9 ]   --->  		var normalMatrixv  = new  Float32Array  ( 9 )
	for ( int i   = 0 ; i   < 3 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 3 ; i  ++  )
	for ( int j   = 0 ; j   < 3 ; j   ++  )  --->  		for ( var j  = 0 ; j  < 3 ; j  ++  )
	normalMatrixv  [  i  +3* j   ]  =  mvMatrixv  [  i  +4* j   ]  --->  		normalMatrixv [ i +3*j  ]  = mvMatrixv [ i +4*j  ]
	normalMatrix    =   BufferUtil.newFloatBuffer   (  normalMatrixv   )  --->  		normalMatrix   = normalMatrixv 
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  teapotVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, teapotVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  teapotVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , teapotVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  teapotVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, teapotVertexNormalBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexNormalAttribute  ,  teapotVertexNormalBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexNormalAttribute , teapotVertexNormalBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  teapotVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, teapotVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  teapotVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, teapotVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAnglex   + =  speedx  * elapsed  *0.001  --->  		rAnglex  + = speedx *elapsed *0.001
	rAngley   + =  speedy  * elapsed  *0.001  --->  		rAngley  + = speedy *elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	 if ( commands  [ 2 ] )  --->  		 if ( commands [ 2 ] )
	speedx   - = 2* elapsed  *0.001  --->  		speedx  - = 2*elapsed *0.001
	 if ( commands  [ 3 ] )  --->  		 if ( commands [ 3 ] )
	speedx   + = 2* elapsed  *0.001  --->  		speedx  + = 2*elapsed *0.001
	 if ( commands  [ 4 ] )  --->  		 if ( commands [ 4 ] )
	speedy   - = 2* elapsed  *0.001  --->  		speedy  - = 2*elapsed *0.001
	 if ( commands  [ 5 ] )  --->  		 if ( commands [ 5 ] )
	speedy   + = 2* elapsed  *0.001  --->  		speedy  + = 2*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 if (   e.getKeyCode   (  )==38 )  --->  		 if ( e.keyCode ==38 )
	commands  [ 2 ]  =  value    --->  		commands [ 2 ]  = value 
	 if (   e.getKeyCode   (  )==40 )  --->  		 if ( e.keyCode ==40 )
	commands  [ 3 ]  =  value    --->  		commands [ 3 ]  = value 
	 if (   e.getKeyCode   (  )==37 )  --->  		 if ( e.keyCode ==37 )
	commands  [ 4 ]  =  value    --->  		commands [ 4 ]  = value 
	 if (   e.getKeyCode   (  )==39 )  --->  		 if ( e.keyCode ==39 )
	commands  [ 5 ]  =  value    --->  		commands [ 5 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv9Drawer.java VS test_sv9Drawer.js
	public class Test_sv9Drawer  --->  		Test_sv9Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexNormalAttribute      --->  		var vertexNormalAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int nMatrixUniform      --->  		var nMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int ambientColorUniform      --->  		var ambientColorUniform 
	private int pointLightingLocationUniform      --->  		var pointLightingLocationUniform 
	private int pointLightingSpecularColorUniform      --->  		var pointLightingSpecularColorUniform 
	private int pointLightingDiffuseColorUniform      --->  		var pointLightingDiffuseColorUniform 
	private int materialShininessUniform      --->  		var materialShininessUniform 
	private int alphaUniform      --->  		var alphaUniform 
	private int[] greenVertexPositionBuffer   = new  int  [ 3 ]   --->  		var greenVertexPositionBuffer  = new  Array  (  )
	private int[] greenVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var greenVertexTextureCoordBuffer  = new  Array  (  )
	private int[] greenVertexNormalBuffer   = new  int  [ 3 ]   --->  		var greenVertexNormalBuffer  = new  Array  (  )
	private int[] sphereVertexPositionBuffer   = new  int  [ 3 ]   --->  		var sphereVertexPositionBuffer  = new  Array  (  )
	private int[] sphereVertexNormalBuffer   = new  int  [ 3 ]   --->  		var sphereVertexNormalBuffer  = new  Array  (  )
	private int[] sphereVertexIndexBuffer   = new  int  [ 3 ]   --->  		var sphereVertexIndexBuffer  = new  Array  (  )
	private int[] sphereVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var sphereVertexTextureCoordBuffer  = new  Array  (  )
	private int[] textures   = new  int  [ 2 ]   --->  		var textures  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private FloatBuffer normalMatrix      --->  		var normalMatrix 
	private float zoom   = -8  --->  		var zoom  = -8
	private long lastTime2   = 0  --->  		var lastTime2  = 0
	private boolean[] commands   = new  boolean  [ 6 ]   --->  		var commands  = new  Array  (  )
	private int lastMouseX   = -1  --->  		var lastMouseX  = -1
	private int lastMouseY   = -1  --->  		var lastMouseY  = -1
	private float[] rotationMatrix   = new  float  [  ]   --->  		var rotationMatrix  = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1 ] )
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader6.fs"  ,  "shaders  / shader6.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader6.fs" , "shaders /shader6.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexNormalAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexNormal"   )  --->  		vertexNormalAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexNormal"  )
	 gl . gl EnableVertexAttribArray (  vertexNormalAttribute   )  --->  		gl. enableVertexAttribArray ( vertexNormalAttribute  )
	textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )  --->  		textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	nMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uNMatrix"   )  --->  		nMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uNMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	ambientColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uAmbientColor"   )  --->  		ambientColorUniform   = gl. getUniformLocation ( shaderProgram , "uAmbientColor"  )
	pointLightingLocationUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingLocation"   )  --->  		pointLightingLocationUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingLocation"  )
	pointLightingSpecularColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingSpecularColor"   )  --->  		pointLightingSpecularColorUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingSpecularColor"  )
	pointLightingDiffuseColorUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPointLightingDiffuseColor"   )  --->  		pointLightingDiffuseColorUniform   = gl. getUniformLocation ( shaderProgram , "uPointLightingDiffuseColor"  )
	materialShininessUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMaterialShininess"   )  --->  		materialShininessUniform   = gl. getUniformLocation ( shaderProgram , "uMaterialShininess"  )
	alphaUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uAlpha"   )  --->  		alphaUniform   = gl. getUniformLocation ( shaderProgram , "uAlpha"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 gl . gl UniformMatrix3fv (  nMatrixUniform  , 9,  false  ,  normalMatrix   )  --->  		gl. uniformMatrix3fv ( nMatrixUniform , false , normalMatrix  )
	 gl . gl Uniform3f (  ambientColorUniform  , 0.1f, 0.1f, 0.1f )  --->  		gl. uniform3f ( ambientColorUniform , 0.1, 0.1, 0.1 )
	 gl . gl Uniform3f (  pointLightingLocationUniform  , -10, 0, 5f )  --->  		gl. uniform3f ( pointLightingLocationUniform , -10, 0, 5 )
	 gl . gl Uniform3f (  pointLightingDiffuseColorUniform  , 0.4f, 0.4f, 0.4f )  --->  		gl. uniform3f ( pointLightingDiffuseColorUniform , 0.4, 0.4, 0.4 )
	 gl . gl Uniform3f (  pointLightingSpecularColorUniform  , 0.5f, 0.5f, 0.5f )  --->  		gl. uniform3f ( pointLightingSpecularColorUniform , 0.5, 0.5, 0.5 )
	 gl . gl Uniform1f (  materialShininessUniform  , 50 )  --->  		gl. uniform1f ( materialShininessUniform , 50 )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	int latitudeBands   = 30  --->  		var latitudeBands  = 30
	int longitudeBands   = 30  --->  		var longitudeBands  = 30
	int radius   = 2  --->  		var radius  = 2
	float[] vertices   = new  float  [ 3* (  latitudeBands  +1 )* (  longitudeBands  +1 ) ]   --->  		var vertices  = new  Array  (  )
	float[] normals   = new  float  [ 3* (  latitudeBands  +1 )* (  longitudeBands  +1 ) ]   --->  		var normals  = new  Array  (  )
	float[] textureCoords   = new  float  [ 2* (  latitudeBands  +1 )* (  longitudeBands  +1 ) ]   --->  		var textureCoords  = new  Array  (  )
	short[] sphereVertexIndices   = new  short  [ 6* latitudeBands  * longitudeBands   ]   --->  		var sphereVertexIndices  = new  Array  (  )
	for ( int i   = 0 ; i   <=  latitudeBands   ; i   ++  )  --->  		for ( var i  = 0 ; i  <= latitudeBands  ; i  ++  )
	float theta   = ( float ) (  i  * Math.PI  / latitudeBands   )  --->  		var theta  = i *Math.PI /latitudeBands 
	float sinTheta   = ( float )  Math.sin   (  theta   )  --->  		var sinTheta  =  Math.sin  ( theta  )
	float cosTheta   = ( float )  Math.cos   (  theta   )  --->  		var cosTheta  =  Math.cos  ( theta  )
	for ( int j   = 0 ; j   <=  longitudeBands   ; j   ++  )  --->  		for ( var j  = 0 ; j  <= longitudeBands  ; j  ++  )
	float phi   = ( float ) (  j  *2* Math.PI  / longitudeBands   )  --->  		var phi  = ( j *2*Math.PI /longitudeBands  )
	float sinPhi   = ( float )  Math.sin   (  phi   )  --->  		var sinPhi  =  Math.sin  ( phi  )
	float cosPhi   = ( float )  Math.cos   (  phi   )  --->  		var cosPhi  =  Math.cos  ( phi  )
	float x   =  cosPhi  * sinTheta    --->  		var x  = cosPhi *sinTheta 
	float y   =  cosTheta    --->  		var y  = cosTheta 
	float z   =  sinPhi  * sinTheta    --->  		var z  = sinPhi *sinTheta 
	int index   = 3* (  j  + i  * (  longitudeBands  +1 ) )  --->  		var index  = 3*( j +i *( longitudeBands +1 ) )
	vertices  [  index   ]  =  radius  * x    --->  		vertices [ index  ]  = radius *x 
	vertices  [  index  +1 ]  =  radius  * y    --->  		vertices [ index +1 ]  = radius *y 
	vertices  [  index  +2 ]  =  radius  * z    --->  		vertices [ index +2 ]  = radius *z 
	normals  [  index   ]  =  x    --->  		normals [ index  ]  = x 
	normals  [  index  +1 ]  =  y    --->  		normals [ index +1 ]  = y 
	normals  [  index  +2 ]  =  z    --->  		normals [ index +2 ]  = z 
	index    = 2* (  j  + i  * (  longitudeBands  +1 ) )  --->  		index   = 2*( j +i *( longitudeBands +1 ) )
	textureCoords  [  index   ]  =  u    --->  		textureCoords [ index  ]  = u 
	textureCoords  [  index  +1 ]  =  v    --->  		textureCoords [ index +1 ]  = v 
	for ( int i   = 0 ; i   <  latitudeBands   ; i   ++  )  --->  		for ( var i  = 0 ; i  < latitudeBands  ; i  ++  )
	for ( int j   = 0 ; j   <  longitudeBands   ; j   ++  )  --->  		for ( var j  = 0 ; j  < longitudeBands  ; j  ++  )
	short first   = ( short ) (  (  i  * (  longitudeBands  +1 ) )+ j   )  --->  		var first  = ( i *( longitudeBands +1 ) )+j 
	short second   = ( short ) (  first  + longitudeBands  +1 )  --->  		var second  = first +longitudeBands +1
	int index   = 6* (  j  + i  * longitudeBands   )  --->  		var index  = 6*( j +i *longitudeBands  )
	sphereVertexIndices  [  index   ]  =  first    --->  		sphereVertexIndices [ index  ]  = first 
	sphereVertexIndices  [  index  +1 ]  =  second    --->  		sphereVertexIndices [ index +1 ]  = second 
	sphereVertexIndices  [  index  +2 ]  = ( short ) (  first  +1 )  --->  		sphereVertexIndices [ index +2 ]  = first +1
	sphereVertexIndices  [  index  +3 ]  =  second    --->  		sphereVertexIndices [ index +3 ]  = second 
	sphereVertexIndices  [  index  +4 ]  = ( short ) (  second  +1 )  --->  		sphereVertexIndices [ index +4 ]  = second +1
	sphereVertexIndices  [  index  +5 ]  = ( short ) (  first  +1 )  --->  		sphereVertexIndices [ index +5 ]  = first +1
	 gl . gl GenBuffers ( 1,  sphereVertexPositionBuffer  , 0 )  --->  		sphereVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexPositionBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	sphereVertexPositionBuffer  [ 1 ]  = 3  --->  		sphereVertexPositionBuffer [ 1 ]  = 3
	sphereVertexPositionBuffer  [ 2 ]  =  vertices.length  /3  --->  		sphereVertexPositionBuffer [ 2 ]  = vertices.length /3
	 gl . gl GenBuffers ( 1,  sphereVertexNormalBuffer  , 0 )  --->  		sphereVertexNormalBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexNormalBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  normals.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  normals   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( normals  ), gl. STATIC_DRAW )
	sphereVertexNormalBuffer  [ 1 ]  = 3  --->  		sphereVertexNormalBuffer [ 1 ]  = 3
	sphereVertexNormalBuffer  [ 2 ]  =  normals.length  /3  --->  		sphereVertexNormalBuffer [ 2 ]  = normals.length /3
	 gl . gl GenBuffers ( 1,  sphereVertexTextureCoordBuffer  , 0 )  --->  		sphereVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexTextureCoordBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	sphereVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		sphereVertexTextureCoordBuffer [ 1 ]  = 2
	sphereVertexTextureCoordBuffer  [ 2 ]  =  textureCoords.length  /2  --->  		sphereVertexTextureCoordBuffer [ 2 ]  = textureCoords.length /2
	 gl . gl GenBuffers ( 1,  sphereVertexIndexBuffer  , 0 )  --->  		sphereVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, sphereVertexIndexBuffer [ 0 ] )
	 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  sphereVertexIndices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( sphereVertexIndices  ), gl. STATIC_DRAW )
	sphereVertexIndexBuffer  [ 1 ]  = 1  --->  		sphereVertexIndexBuffer [ 1 ]  = 1
	sphereVertexIndexBuffer  [ 2 ]  =  sphereVertexIndices.length    --->  		sphereVertexIndexBuffer [ 2 ]  = sphereVertexIndices.length 
	 gl . gl GenBuffers ( 1,  greenVertexPositionBuffer  , 0 )  --->  		greenVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexPositionBuffer [ 0 ] )
	float[] vertices2   =;		-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f  --->  		var vertices2  = [ -1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices2  ), gl. STATIC_DRAW )
	greenVertexPositionBuffer  [ 1 ]  = 3  --->  		greenVertexPositionBuffer [ 1 ]  = 3
	greenVertexPositionBuffer  [ 2 ]  = 4  --->  		greenVertexPositionBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  greenVertexTextureCoordBuffer  , 0 )  --->  		greenVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords2   =;		0.0f,10.0f,0.0f,0.0f,10.0f,0.0f,10.0f,10.0f  --->  		var textureCoords2  = [ 0.0,10.0,0.0,0.0,10.0,0.0,10.0,10.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords2  ), gl. STATIC_DRAW )
	greenVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		greenVertexTextureCoordBuffer [ 1 ]  = 2
	greenVertexTextureCoordBuffer  [ 2 ]  = 4  --->  		greenVertexTextureCoordBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  greenVertexNormalBuffer  , 0 )  --->  		greenVertexNormalBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexNormalBuffer [ 0 ] )
	float[] normals2   =;		0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f  --->  		var normals2  = [ 0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  normals2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  normals2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( normals2  ), gl. STATIC_DRAW )
	greenVertexNormalBuffer  [ 1 ]  = 3  --->  		greenVertexNormalBuffer [ 1 ]  = 3
	greenVertexNormalBuffer  [ 2 ]  = 4  --->  		greenVertexNormalBuffer [ 2 ]  = 4
	 public void initTexture   ( GL2 gl   ) throws IOException    --->  		, initTexture : function ( gl  )
	 gl . gl GenTextures ( 2,  textures  , 0 )  --->  		textures [ i  ]  = gl. createTexture (  );			for ( var i  = 0 ; i  < 2 ; i  ++  )
	TextureData tex1   =   TextureIO.newTextureData   ( new  File   (  "images  / bubble.gif"   ),  false  ,  null   )  --->  		var tex1  = new  Image  (  );			tex1.onload   =  function  (  );			tex1.src   = "images /bubble.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex1.getWidth   (  ),   tex1.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex1.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex1  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. REPEAT )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. REPEAT )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	TextureData tex2   =   TextureIO.newTextureData   ( new  File   (  "images  / grass.gif"   ),  false  ,  null   )  --->  		var tex2  = new  Image  (  );			tex2.onload   =  function  (  );			tex2.src   = "images /grass.gif" 
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 1 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 1 ] )
	 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex2.getWidth   (  ),   tex2.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex2.getBuffer   (  ) )  --->  		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex2  )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ LINEAR_MIPMAP_LINEAR )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. LINEAR_MIPMAP_LINEAR )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_S, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_S, gl. REPEAT )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_WRAP_T, GL2 .GL_ REPEAT )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_WRAP_T, gl. REPEAT )
	 gl . gl GenerateMipmap ( GL2 .GL_ TEXTURE_2D )  --->  		gl. generateMipmap ( gl. TEXTURE_2D )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )  --->  		gl. bindTexture ( gl. TEXTURE_2D, 0 )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl BlendFunc ( GL2 .GL_ SRC_ALPHA, GL2 .GL_ ONE )  --->  		gl. blendFunc ( gl. SRC_ALPHA, gl. ONE )
	 gl . gl Enable ( GL2 .GL_ BLEND )  --->  		gl. enable ( gl. BLEND )
	  handleKeys   (  )  --->  		 this.handleKeys  (  )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	float[] mvMatrixv   = new  float  [  ] ;		10,0,0,0,0,10,0,0,0,0,10,0,0,0, zoom  ,1  --->  		var mvMatrixv  = new  Float32Array  ( [ 10,0,0,0,0,10,0,0,0,0,10,0,0,0,zoom ,1 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   )  --->  		mvMatrix   = mvMatrixv 
	float[] normalMatrixv   = new  float  [ 9 ]   --->  		var normalMatrixv  = new  Float32Array  ( 9 )
	for ( int i   = 0 ; i   < 3 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 3 ; i  ++  )
	for ( int j   = 0 ; j   < 3 ; j   ++  )  --->  		for ( var j  = 0 ; j  < 3 ; j  ++  )
	normalMatrixv  [  i  +3* j   ]  =  mvMatrixv  [  i  +4* j   ]  --->  		normalMatrixv [ i +3*j  ]  = mvMatrixv [ i +4*j  ]
	normalMatrix    =   BufferUtil.newFloatBuffer   (  normalMatrixv   )  --->  		normalMatrix   = normalMatrixv 
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  greenVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , greenVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexNormalBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexNormalAttribute  ,  greenVertexNormalBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexNormalAttribute , greenVertexNormalBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  greenVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, greenVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  greenVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , greenVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 1 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 1 ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl Uniform1f (  alphaUniform  , 1 )  --->  		gl. uniform1f ( alphaUniform , 1 )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_STRIP, 0,  greenVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_STRIP, 0, greenVertexPositionBuffer [ 2 ] )
	mvMatrixv    =   Util.multiplyMatrix   (  rotationMatrix  ,  mvMatrixv   )  --->  		mvMatrixv   =  multiplyMatrix  ( rotationMatrix , mvMatrixv  )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   )  --->  		mvMatrix   = mvMatrixv 
	for ( int i   = 0 ; i   < 3 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 3 ; i  ++  )
	for ( int j   = 0 ; j   < 3 ; j   ++  )  --->  		for ( var j  = 0 ; j  < 3 ; j  ++  )
	normalMatrixv  [  i  +3* j   ]  =  mvMatrixv  [  i  +4* j   ]  --->  		normalMatrixv [ i +3*j  ]  = mvMatrixv [ i +4*j  ]
	normalMatrix    =   BufferUtil.newFloatBuffer   (  normalMatrixv   )  --->  		normalMatrix   = normalMatrixv 
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  sphereVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , sphereVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexNormalBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexNormalBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexNormalAttribute  ,  sphereVertexNormalBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexNormalAttribute , sphereVertexNormalBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  sphereVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, sphereVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  sphereVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , sphereVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  textures  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, textures [ 0 ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  sphereVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, sphereVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl Uniform1f (  alphaUniform  , 0.8f )  --->  		gl. uniform1f ( alphaUniform , 0.8 )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  sphereVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, sphereVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	 private void handleKeys   (  )  --->  		, handleKeys : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime2  !=0 )  --->  		 if ( lastTime2 !=0 )
	long elapsed   =  timeNow  - lastTime2    --->  		var elapsed  = timeNow -lastTime2 
	 if ( commands  [ 0 ] )  --->  		 if ( commands [ 0 ] )
	zoom   + = 5* elapsed  *0.001  --->  		zoom  + = 5*elapsed *0.001
	 if ( commands  [ 1 ] )  --->  		 if ( commands [ 1 ] )
	zoom   - = 5* elapsed  *0.001  --->  		zoom  - = 5*elapsed *0.001
	lastTime2    =  timeNow    --->  		lastTime2   = timeNow 
	 private void setCommands   ( KeyEvent e  , boolean value   )  --->  		, setCommands : function ( e , value  )
	 if (   e.getKeyCode   (  )==65 )  --->  		 if ( e.keyCode ==65 )
	commands  [ 0 ]  =  value    --->  		commands [ 0 ]  = value 
	 if (   e.getKeyCode   (  )==90 )  --->  		 if ( e.keyCode ==90 )
	commands  [ 1 ]  =  value    --->  		commands [ 1 ]  = value 
	 public void keyPressed   ( KeyEvent e   )  --->  		, keyPressed : function ( e  )
	  setCommands   (  e  ,  true   )  --->  		 this.setCommands  ( e , true  )
	 public void keyReleased   ( KeyEvent e   )  --->  		, keyReleased : function ( e  )
	  setCommands   (  e  ,  false   )  --->  		 this.setCommands  ( e , false  )
	 public void mousePressed   ( MouseEvent e   )  --->  		, mousePressed : function ( e  )
	lastMouseX    =   e.getX   (  )  --->  		lastMouseX   = e.clientX 
	lastMouseY    =   e.getY   (  )  --->  		lastMouseY   = e.clientY 
	 public void mouseDragged   ( MouseEvent e   )  --->  		, mouseDragged : function ( e  )
	int deltaX   =   e.getX   (  )- lastMouseX    --->  		var deltaX  = e.clientX -lastMouseX 
	int deltaY   =   e.getY   (  )- lastMouseY    --->  		var deltaY  = e.clientY -lastMouseY 
	double rAnglex   =  deltaY  *0.01  --->  		var rAnglex  = deltaY *0.01
	double rAngley   =  deltaX  *0.01  --->  		var rAngley  = deltaX *0.01
	float cx   = ( float )  Math.cos   (  rAnglex   )  --->  		var cx  =  Math.cos  ( rAnglex  )
	float sx   = ( float )  Math.sin   (  rAnglex   )  --->  		var sx  =  Math.sin  ( rAnglex  )
	float cy   = ( float )  Math.cos   (  rAngley   )  --->  		var cy  =  Math.cos  ( rAngley  )
	float sy   = ( float )  Math.sin   (  rAngley   )  --->  		var sy  =  Math.sin  ( rAngley  )
	float[] newRotationMatrix   = new  float  [  ] ;		 cy  , sx  * sy  ,-cx* sy  ,0,0, cx  , sx  ,0, sy  ,-cy* sx  , cx  * cy  ,0,0,0,0,1  --->  		var newRotationMatrix  = new  Float32Array  ( [ cy ,sx *sy ,-cx*sy ,0,0,cx ,sx ,0,sy ,-cy*sx ,cx *cy ,0,0,0,0,1 ] )
	rotationMatrix    =   Util.multiplyMatrix   (  rotationMatrix  ,  newRotationMatrix   )  --->  		rotationMatrix   =  multiplyMatrix  ( rotationMatrix , newRotationMatrix  )
	lastMouseX    =   e.getX   (  )  --->  		lastMouseX   = e.clientX 
	lastMouseY    =   e.getY   (  )  --->  		lastMouseY   = e.clientY 
	unmatched javaPatterns:
		1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1
		float u   = 1- ( ( float ) j  / longitudeBands   )
		float v   = 1- ( ( float ) i  / latitudeBands   )
		mvMatrixv    = new  float  [  ] 
		1,0,0,0,0,1,0,0,0,0,1,0,0,0, zoom  ,1
	unmatched jsPatterns:
		var u  = 1-j /longitudeBands 
		var v  = 1-i /latitudeBands 
		mvMatrixv   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,0,0,zoom ,1 ] )

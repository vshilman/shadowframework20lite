
Test_sv1Drawer.java VS test_sv1Drawer.js
	public class Test_sv1Drawer  --->  		Test_sv1Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexColorAttribute      --->  		var vertexColorAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int[] triangleVertexPositionBuffer   = new  int  [ 3 ]   --->  		var triangleVertexPositionBuffer  = new  Array  (  )
	private int[] triangleVertexColorBuffer   = new  int  [ 3 ]   --->  		var triangleVertexColorBuffer  = new  Array  (  )
	private int[] squareVertexPositionBuffer   = new  int  [ 3 ]   --->  		var squareVertexPositionBuffer  = new  Array  (  )
	private int[] squareVertexColorBuffer   = new  int  [ 3 ]   --->  		var squareVertexColorBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader1.fs"  ,  "shaders  / shader1.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader1.fs" , "shaders /shader1.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexColorAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexColor"   )  --->  		vertexColorAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexColor"  )
	 gl . gl EnableVertexAttribArray (  vertexColorAttribute   )  --->  		gl. enableVertexAttribArray ( vertexColorAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	 public void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  triangleVertexPositionBuffer  , 0 )  --->  		triangleVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		0.0f,1.0f,0.0f,-1.0f,-1.0f,0.0f,1.0f,-1.0f,0.0f  --->  		var vertices  = [ 0.0,1.0,0.0,-1.0,-1.0,0.0,1.0,-1.0,0.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	triangleVertexPositionBuffer  [ 1 ]  = 3  --->  		triangleVertexPositionBuffer [ 1 ]  = 3
	triangleVertexPositionBuffer  [ 2 ]  = 3  --->  		triangleVertexPositionBuffer [ 2 ]  = 3
	 gl . gl GenBuffers ( 1,  triangleVertexColorBuffer  , 0 )  --->  		triangleVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexColorBuffer [ 0 ] )
	float[] colors   =;		1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f  --->  		var colors  = [ 1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors  ), gl. STATIC_DRAW )
	triangleVertexColorBuffer  [ 1 ]  = 4  --->  		triangleVertexColorBuffer [ 1 ]  = 4
	triangleVertexColorBuffer  [ 2 ]  = 3  --->  		triangleVertexColorBuffer [ 2 ]  = 3
	 gl . gl GenBuffers ( 1,  squareVertexPositionBuffer  , 0 )  --->  		squareVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexPositionBuffer [ 0 ] )
	float[] vertices2   =;		1.0f,1.0f,0.0f,-1.0f,1.0f,0.0f,1.0f,-1.0f,0.0f,-1.0f,-1.0f,0.0f  --->  		var vertices2  = [ 1.0,1.0,0.0,-1.0,1.0,0.0,1.0,-1.0,0.0,-1.0,-1.0,0.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices2  ), gl. STATIC_DRAW )
	squareVertexPositionBuffer  [ 1 ]  = 3  --->  		squareVertexPositionBuffer [ 1 ]  = 3
	squareVertexPositionBuffer  [ 2 ]  = 4  --->  		squareVertexPositionBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  squareVertexColorBuffer  , 0 )  --->  		squareVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexColorBuffer [ 0 ] )
	float[] colors2   = new  float  [ 16 ]   --->  		var colors2  = new  Array  (  )
	for ( int i   = 0 ; i   < 4 ; i   ++  )  --->  		for ( var i  = 0 ; i  < 4 ; i  ++  )
	int c   =  i  <<2  --->  		var c  = i <<2
	colors2  [  c   ]  = 1  --->  		colors2 [ c  ]  = 1
	colors2  [  c  +1 ]  = 0.75f  --->  		colors2 [ c +1 ]  = 0.75
	colors2  [  c  +2 ]  = 0.8f  --->  		colors2 [ c +2 ]  = 0.8
	colors2  [  c  +3 ]  = 1  --->  		colors2 [ c +3 ]  = 1
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors2  ), gl. STATIC_DRAW )
	squareVertexColorBuffer  [ 1 ]  = 4  --->  		squareVertexColorBuffer [ 1 ]  = 4
	squareVertexColorBuffer  [ 2 ]  = 4  --->  		squareVertexColorBuffer [ 2 ]  = 4
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,4  --->  		pMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,4 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,-1.5f,0,0,1  --->  		mvMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,-1.5,0,0,1 ] )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  triangleVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , triangleVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  triangleVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, triangleVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  triangleVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , triangleVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLES, 0,  triangleVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLES, 0, triangleVertexPositionBuffer [ 2 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		mvMatrixv    = new  float  [  ] ;		1,0,0,0,0,1,0,0,0,0,1,0,1.5f,0,0,1  --->  		mvMatrix   = new  Float32Array  ( [ 1,0,0,0,0,1,0,0,0,0,1,0,1.5,0,0,1 ] )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  squareVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , squareVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  squareVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, squareVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  squareVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , squareVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_STRIP, 0,  squareVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_STRIP, 0, squareVertexPositionBuffer [ 2 ] )
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv2Drawer.java VS test_sv2Drawer.js
	public class Test_sv2Drawer  --->  		Test_sv2Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int vertexColorAttribute      --->  		var vertexColorAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int[] pyramidVertexPositionBuffer   = new  int  [ 3 ]   --->  		var pyramidVertexPositionBuffer  = new  Array  (  )
	private int[] pyramidVertexColorBuffer   = new  int  [ 3 ]   --->  		var pyramidVertexColorBuffer  = new  Array  (  )
	private int[] baseVertexPositionBuffer   = new  int  [ 3 ]   --->  		var baseVertexPositionBuffer  = new  Array  (  )
	private int[] baseVertexColorBuffer   = new  int  [ 3 ]   --->  		var baseVertexColorBuffer  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAngle   = 0  --->  		var rAngle  = 0
	private long lastTime   = 0  --->  		var lastTime  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader1.fs"  ,  "shaders  / shader1.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader1.fs" , "shaders /shader1.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	vertexColorAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexColor"   )  --->  		vertexColorAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexColor"  )
	 gl . gl EnableVertexAttribArray (  vertexColorAttribute   )  --->  		gl. enableVertexAttribArray ( vertexColorAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	 public void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  pyramidVertexPositionBuffer  , 0 )  --->  		pyramidVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		0.0f,1.0f,0.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f  --->  		var vertices  = [ 0.0,1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	pyramidVertexPositionBuffer  [ 1 ]  = 3  --->  		pyramidVertexPositionBuffer [ 1 ]  = 3
	pyramidVertexPositionBuffer  [ 2 ]  = 6  --->  		pyramidVertexPositionBuffer [ 2 ]  = 6
	 gl . gl GenBuffers ( 1,  pyramidVertexColorBuffer  , 0 )  --->  		pyramidVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexColorBuffer [ 0 ] )
	float[] colors   =;		1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f  --->  		var colors  = [ 1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors  ), gl. STATIC_DRAW )
	pyramidVertexColorBuffer  [ 1 ]  = 4  --->  		pyramidVertexColorBuffer [ 1 ]  = 4
	pyramidVertexColorBuffer  [ 2 ]  = 6  --->  		pyramidVertexColorBuffer [ 2 ]  = 6
	 gl . gl GenBuffers ( 1,  baseVertexPositionBuffer  , 0 )  --->  		baseVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexPositionBuffer [ 0 ] )
	float[] vertices2   =;		-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f  --->  		var vertices2  = [ -1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices2  ), gl. STATIC_DRAW )
	baseVertexPositionBuffer  [ 1 ]  = 3  --->  		baseVertexPositionBuffer [ 1 ]  = 3
	baseVertexPositionBuffer  [ 2 ]  = 4  --->  		baseVertexPositionBuffer [ 2 ]  = 4
	 gl . gl GenBuffers ( 1,  baseVertexColorBuffer  , 0 )  --->  		baseVertexColorBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexColorBuffer [ 0 ] )
	float[] colors2   =;		0.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f  --->  		var colors2  = [ 0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  colors2.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  colors2   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( colors2  ), gl. STATIC_DRAW )
	baseVertexColorBuffer  [ 1 ]  = 4  --->  		baseVertexColorBuffer [ 1 ]  = 4
	baseVertexColorBuffer  [ 2 ]  = 4  --->  		baseVertexColorBuffer [ 2 ]  = 4
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAngle   )  --->  		var cx  =  Math.cos  ( rAngle  )
	float sx   = ( float )  Math.sin   (  rAngle   )  --->  		var sx  =  Math.sin  ( rAngle  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cx  , sx  * sx  ,-cx* sx  ,0,0, cx  , sx  ,0, sx  ,-cx* sx  , cx  * cx  ,0,0,0,-8,1  --->  		mvMatrix   = new  Float32Array  ( [ cx ,sx *sx ,-cx*sx ,0,0,cx ,sx ,0,sx ,-cx*sx ,cx *cx ,0,0,0,-8,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  pyramidVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , pyramidVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  pyramidVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, pyramidVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  pyramidVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , pyramidVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_FAN, 0,  pyramidVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_FAN, 0, pyramidVertexPositionBuffer [ 2 ] )
	 gl . gl FrontFace ( GL2 .GL_ CW )  --->  		gl. frontFace ( gl. CW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  baseVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , baseVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  baseVertexColorBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, baseVertexColorBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexColorAttribute  ,  baseVertexColorBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexColorAttribute , baseVertexColorBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawArrays ( GL2 .GL_ TRIANGLE_STRIP, 0,  baseVertexPositionBuffer  [ 2 ] )  --->  		gl. drawArrays ( gl. TRIANGLE_STRIP, 0, baseVertexPositionBuffer [ 2 ] )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAngle   + = 1.57* elapsed  *0.001  --->  		rAngle  + = 1.57*elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	unmatched javaPatterns:
	unmatched jsPatterns:

Test_sv3Drawer.java VS test_sv3Drawer.js
	public class Test_sv3Drawer  --->  		Test_sv3Drawer . prototype =
	private int vertexPositionAttribute      --->  		var vertexPositionAttribute 
	private int textureCoordAttribute      --->  		var textureCoordAttribute 
	private int pMatrixUniform      --->  		var pMatrixUniform 
	private int mvMatrixUniform      --->  		var mvMatrixUniform 
	private int samplerUniform      --->  		var samplerUniform 
	private int[] cubeVertexPositionBuffer   = new  int  [ 3 ]   --->  		var cubeVertexPositionBuffer  = new  Array  (  )
	private int[] cubeVertexIndexBuffer   = new  int  [ 3 ]   --->  		var cubeVertexIndexBuffer  = new  Array  (  )
	private int[] cubeVertexTextureCoordBuffer   = new  int  [ 3 ]   --->  		var cubeVertexTextureCoordBuffer  = new  Array  (  )
	private int[] texture1   = new  int  [ 1 ]   --->  		var texture1  = new  Array  (  )
	private FloatBuffer pMatrix      --->  		var pMatrix 
	private FloatBuffer mvMatrix      --->  		var mvMatrix 
	private double rAngle   = 0  --->  		var rAngle  = 0
	private long lastTime   = 0  --->  		var lastTime  = 0
	 public void initShaders   ( GL2 gl   )  --->  		 initShaders : function ( gl  )
	int shaderProgram   =   Util.getShaderProgram   (  gl  ,  "shaders  / shader2.fs"  ,  "shaders  / shader2.vs"   )  --->  		var shaderProgram  =  getShaderProgram  ( gl , "shaders /shader2.fs" , "shaders /shader2.vs"  )
	vertexPositionAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aVertexPosition"   )  --->  		vertexPositionAttribute   = gl. getAttribLocation ( shaderProgram , "aVertexPosition"  )
	 gl . gl EnableVertexAttribArray (  vertexPositionAttribute   )  --->  		gl. enableVertexAttribArray ( vertexPositionAttribute  )
	 gl . gl EnableVertexAttribArray (  textureCoordAttribute   )  --->  		gl. enableVertexAttribArray ( textureCoordAttribute  )
	pMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uPMatrix"   )  --->  		pMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uPMatrix"  )
	mvMatrixUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uMVMatrix"   )  --->  		mvMatrixUniform   = gl. getUniformLocation ( shaderProgram , "uMVMatrix"  )
	samplerUniform    =  gl . gl GetUniformLocation (  shaderProgram  ,  "uSampler"   )  --->  		samplerUniform   = gl. getUniformLocation ( shaderProgram , "uSampler"  )
	 private void setMatrixUniforms   ( GL2 gl   )  --->  		, setMatrixUniforms : function ( gl  )
	 gl . gl UniformMatrix4fv (  pMatrixUniform  , 16,  false  ,  pMatrix   )  --->  		gl. uniformMatrix4fv ( pMatrixUniform , false , pMatrix  )
	 gl . gl UniformMatrix4fv (  mvMatrixUniform  , 16,  false  ,  mvMatrix   )  --->  		gl. uniformMatrix4fv ( mvMatrixUniform , false , mvMatrix  )
	 public void initBuffers   ( GL2 gl   )  --->  		, initBuffers : function ( gl  )
	 gl . gl GenBuffers ( 1,  cubeVertexPositionBuffer  , 0 )  --->  		cubeVertexPositionBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	float[] vertices   =;		-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1.0f,-1.0f,1.0f,1.0f,-1.0f,1.0f,-1.0f  --->  		var vertices  = [ -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  vertices.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  vertices   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( vertices  ), gl. STATIC_DRAW )
	cubeVertexPositionBuffer  [ 1 ]  = 3  --->  		cubeVertexPositionBuffer [ 1 ]  = 3
	cubeVertexPositionBuffer  [ 2 ]  = 24  --->  		cubeVertexPositionBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexTextureCoordBuffer  , 0 )  --->  		cubeVertexTextureCoordBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	float[] textureCoords   =;		0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f  --->  		var textureCoords  = [ 0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0 ]
	 gl . gl BufferData ( GL2 .GL_ ARRAY_BUFFER,  textureCoords.length  * BufferUtil.SIZEOF_FLOAT  ,   BufferUtil.newFloatBuffer   (  textureCoords   ), GL2 .GL_ STATIC_DRAW )  --->  		gl. bufferData ( gl. ARRAY_BUFFER, new  Float32Array  ( textureCoords  ), gl. STATIC_DRAW )
	cubeVertexTextureCoordBuffer  [ 1 ]  = 2  --->  		cubeVertexTextureCoordBuffer [ 1 ]  = 2
	cubeVertexTextureCoordBuffer  [ 2 ]  = 24  --->  		cubeVertexTextureCoordBuffer [ 2 ]  = 24
	 gl . gl GenBuffers ( 1,  cubeVertexIndexBuffer  , 0 )  --->  		cubeVertexIndexBuffer [ 0 ]  = gl. createBuffer (  )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	short[] cubeVertexIndices   =;		0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23  --->  		var cubeVertexIndices  = [ 0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23 ]
	cubeVertexIndexBuffer  [ 1 ]  = 1  --->  		cubeVertexIndexBuffer [ 1 ]  = 1
	cubeVertexIndexBuffer  [ 2 ]  = 36  --->  		cubeVertexIndexBuffer [ 2 ]  = 36
	 public void initTexture   ( GL2 gl   )  --->  		, initTexture : function ( gl  )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  texture1  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, texture1 [ 0 ] )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MAG_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MAG_FILTER, gl. NEAREST )
	 gl . gl TexParameteri ( GL2 .GL_ TEXTURE_2D, GL2 .GL_ TEXTURE_MIN_FILTER, GL2 .GL_ NEAREST )  --->  		gl. texParameteri ( gl. TEXTURE_2D, gl. TEXTURE_MIN_FILTER, gl. NEAREST )
	 public void drawScene   ( GL2 gl   )  --->  		, drawScene : function ( gl  )
	 gl . gl ClearColor ( 0.0f, 0.0f, 0.0f, 1.0f )  --->  		gl. clearColor ( 0.0, 0.0, 0.0, 1.0 )
	 gl . gl Enable ( GL2 .GL_ DEPTH_TEST )  --->  		gl. enable ( gl. DEPTH_TEST )
	 gl . gl CullFace ( GL2 .GL_ BACK )  --->  		gl. cullFace ( gl. BACK )
	 gl . gl Enable ( GL2 .GL_ CULL_FACE )  --->  		gl. enable ( gl. CULL_FACE )
	 gl . gl Viewport ( 0, 0, 500, 500 )  --->  		gl. viewport ( 0, 0, 500, 500 )
	 gl . gl Clear ( GL2 .GL_ COLOR_BUFFER_BIT|GL2 .GL_ DEPTH_BUFFER_BIT )  --->  		gl. clear ( gl. COLOR_BUFFER_BIT|gl. DEPTH_BUFFER_BIT )
	float cx   = ( float )  Math.cos   (  rAngle   )  --->  		var cx  =  Math.cos  ( rAngle  )
	float sx   = ( float )  Math.sin   (  rAngle   )  --->  		var sx  =  Math.sin  ( rAngle  )
	pMatrix    =   BufferUtil.newFloatBuffer   (  pMatrixv   );		float[] pMatrixv   = new  float  [  ] ;		2.4142136573791504f,0,0,0,0,2.4142136573791504f,0,0,0,0,-1.0020020008087158f,-1,0,0,-0.20020020008087158f,0  --->  		pMatrix   = new  Float32Array  ( [ 2.4142136573791504,0,0,0,0,2.4142136573791504,0,0,0,0,-1.0020020008087158,-1,0,0,-0.20020020008087158,0 ] )
	mvMatrix    =   BufferUtil.newFloatBuffer   (  mvMatrixv   );		float[] mvMatrixv   = new  float  [  ] ;		 cx  * cx  , cx  * (  sx  * sx  + sx   ), sx  * sx  - cx  * cx  * sx  ,0,-cx* sx  , cx  * cx  - sx  * sx  * sx  , cx  * (  sx  * sx  + sx   ),0, sx  ,-cx* sx  , cx  * cx  ,0,0,0,-8,1  --->  		mvMatrix   = new  Float32Array  ( [ cx *cx ,cx *( sx *sx +sx  ),sx *sx -cx *cx *sx ,0,-cx*sx ,cx *cx -sx *sx *sx ,cx *( sx *sx +sx  ),0,sx ,-cx*sx ,cx *cx ,0,0,0,-8,1 ] )
	 gl . gl FrontFace ( GL2 .GL_ CCW )  --->  		gl. frontFace ( gl. CCW )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexPositionBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexPositionBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  vertexPositionAttribute  ,  cubeVertexPositionBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( vertexPositionAttribute , cubeVertexPositionBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ARRAY_BUFFER,  cubeVertexTextureCoordBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ARRAY_BUFFER, cubeVertexTextureCoordBuffer [ 0 ] )
	 gl . gl VertexAttribPointer (  textureCoordAttribute  ,  cubeVertexTextureCoordBuffer  [ 1 ], GL2 .GL_ FLOAT,  false  , 0, 0 )  --->  		gl. vertexAttribPointer ( textureCoordAttribute , cubeVertexTextureCoordBuffer [ 1 ], gl. FLOAT, false , 0, 0 )
	 gl . gl ActiveTexture ( GL2 .GL_ TEXTURE0 )  --->  		gl. activeTexture ( gl. TEXTURE0 )
	 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D,  texture1  [ 0 ] )  --->  		gl. bindTexture ( gl. TEXTURE_2D, texture1 [ 0 ] )
	 gl . gl Uniform1i (  samplerUniform  , 0 )  --->  		gl. uniform1i ( samplerUniform , 0 )
	 gl . gl BindBuffer ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndexBuffer  [ 0 ] )  --->  		gl. bindBuffer ( gl. ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer [ 0 ] )
	  setMatrixUniforms   (  gl   )  --->  		 this.setMatrixUniforms  ( gl  )
	 gl . gl DrawElements ( GL2 .GL_ TRIANGLES,  cubeVertexIndexBuffer  [ 2 ], GL2 .GL_ UNSIGNED_SHORT, 0 )  --->  		gl. drawElements ( gl. TRIANGLES, cubeVertexIndexBuffer [ 2 ], gl. UNSIGNED_SHORT, 0 )
	  animate   (  )  --->  		 this.animate  (  )
	 private void animate   (  )  --->  		, animate : function (  )
	long timeNow   =   System.currentTimeMillis   (  )  --->  		var timeNow  = new  Date  (  ) . getTime  (  )
	 if ( lastTime  !=0 )  --->  		 if ( lastTime !=0 )
	long elapsed   =  timeNow  - lastTime    --->  		var elapsed  = timeNow -lastTime 
	rAngle   + = 1.57* elapsed  *0.001  --->  		rAngle  + = 1.57*elapsed *0.001
	lastTime    =  timeNow    --->  		lastTime   = timeNow 
	unmatched javaPatterns:
		textureCoordAttribute    =  gl . gl GetAttribLocation (  shaderProgram  ,  "aTextureCoord"   )
		 gl . gl BufferData ( GL2 .GL_ ELEMENT_ARRAY_BUFFER,  cubeVertexIndices.length  * BufferUtil.SIZEOF_SHORT  ,   BufferUtil.newShortBuffer   (  cubeVertexIndices   ), GL2 .GL_ STATIC_DRAW )
		 gl . gl GenTextures ( 1,  texture1  , 0 )
		TextureData tex  
		try
		tex    =   TextureIO.newTextureData   ( new  File   (  "images  / crate.gif"   ),  false  ,  null   )
		  catch   (  IOException  ,  e   )
		tex    =  null  
		 gl . gl TexImage2D ( GL2 .GL_ TEXTURE_2D, 0, GL2 .GL_ RGB,   tex.getWidth   (  ),   tex.getHeight   (  ), 0, GL2 .GL_ RGB, GL2 .GL_ UNSIGNED_BYTE,   tex.getBuffer   (  ) )
		 gl . gl BindTexture ( GL2 .GL_ TEXTURE_2D, 0 )
	unmatched jsPatterns:
		shaderProgram.textureCoordAttribute   = gl. getAttribLocation ( shaderProgram , "aTextureCoord"  )
		gl. bufferData ( gl. ELEMENT_ARRAY_BUFFER, new  Uint16Array  ( cubeVertexIndices  ), gl. STATIC_DRAW )
		texture1 [ 0 ]  = gl. createTexture (  )
		var tex  = new  Image  (  )
		tex.onload   =  function  (  )
		gl. texImage2D ( gl. TEXTURE_2D, 0, gl. RGB, gl. RGB, gl. UNSIGNED_BYTE, tex  )
		gl. bindTexture ( gl. TEXTURE_2D, null  )
		tex.src   = "images /crate.gif" 

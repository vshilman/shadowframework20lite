
p
[LIBRARY_DECLARATION] -------> #include  "SFParameter.h"  
null:#include
SEQUENCE: "SFParameter.h"  
		EXPRESSION: "SFParameter.h"  
				COMPOSITE: "SFParameter.h"  
						IGNORED:
						VARIABLE:"SFParameter.h"  
								NAME:"SFParameter.h"
								IGNORED:
								IGNORED:


[CONSTRUCTOR_DECLARATION] -------> SFParameter   :: SFParameter   (  )
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES:
KEYWORD:)


[ATTRIBUTE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> this -> type   =  GLOBAL_GENERIC  
KEYWORD:this
KEYWORD:->
NAME:type  
		NAME:type
		IGNORED:
		IGNORED:
COMPOSITE:=  GLOBAL_GENERIC  
		KEYWORD:=
		EXPRESSION: GLOBAL_GENERIC  
				COMPOSITE: GLOBAL_GENERIC  
						IGNORED:
						VARIABLE:GLOBAL_GENERIC  
								NAME:GLOBAL_GENERIC
								IGNORED:
								IGNORED:


[CONSTRUCTOR_DECLARATION] -------> SFParameter   :: SFParameter   (  string name   )
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES: string name  
		VARIABLE: string name  
				COMPOSITE: string
						IGNORED:
						TYPE:string
				NAME:name  
						NAME:name
						IGNORED:
						IGNORED:
KEYWORD:)


[ATTRIBUTE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> this -> name   =  name  
KEYWORD:this
KEYWORD:->
NAME:name  
		NAME:name
		IGNORED:
		IGNORED:
COMPOSITE:=  name  
		KEYWORD:=
		EXPRESSION: name  
				COMPOSITE: name  
						IGNORED:
						VARIABLE:name  
								NAME:name
								IGNORED:
								IGNORED:


[CONSTRUCTOR_DECLARATION] -------> SFParameter   :: SFParameter   (  string name  ,  short type   )
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES: string name  ,  short type  
		VARIABLE: string name  
				COMPOSITE: string
						IGNORED:
						TYPE:string
				NAME:name  
						NAME:name
						IGNORED:
						IGNORED:
		KEYWORD:, 
		VARIABLE: short type  
				COMPOSITE: short
						IGNORED:
						TYPE:short
				NAME:type  
						NAME:type
						IGNORED:
						IGNORED:
KEYWORD:)


[ATTRIBUTE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> this -> name   =  name  
KEYWORD:this
KEYWORD:->
NAME:name  
		NAME:name
		IGNORED:
		IGNORED:
COMPOSITE:=  name  
		KEYWORD:=
		EXPRESSION: name  
				COMPOSITE: name  
						IGNORED:
						VARIABLE:name  
								NAME:name
								IGNORED:
								IGNORED:


[ATTRIBUTE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> this -> type   =  type  
KEYWORD:this
KEYWORD:->
NAME:type  
		NAME:type
		IGNORED:
		IGNORED:
COMPOSITE:=  type  
		KEYWORD:=
		EXPRESSION: type  
				COMPOSITE: type  
						IGNORED:
						VARIABLE:type  
								NAME:type
								IGNORED:
								IGNORED:


[METHOD_DECLARATION] ------->  string SFParameter   :: getName   (  )
COMPOSITE: string
		IGNORED:
		TYPE:string
VARIABLE:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:getName  
		NAME:getName
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES:
KEYWORD:)


[RETURN, LINE_OF_CODE] -------> return   name  
KEYWORD:return
IGNORED:
EXPRESSION: name  
		COMPOSITE: name  
				IGNORED:
				VARIABLE:name  
						NAME:name
						IGNORED:
						IGNORED:


[METHOD_DECLARATION] ------->  short SFParameter   :: getType   (  )
COMPOSITE: short
		IGNORED:
		TYPE:short
VARIABLE:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:getType  
		NAME:getType
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES:
KEYWORD:)


[RETURN, LINE_OF_CODE] -------> return this ->  type  
KEYWORD:return
COMPOSITE:this ->
		KEYWORD:this
		KEYWORD:->
EXPRESSION: type  
		COMPOSITE: type  
				IGNORED:
				VARIABLE:type  
						NAME:type
						IGNORED:
						IGNORED:


[METHOD_DECLARATION] ------->  void SFParameter   :: setType   (  short type   )
COMPOSITE: void
		IGNORED:
		TYPE:void
VARIABLE:SFParameter  
		NAME:SFParameter
		IGNORED:
		IGNORED:
KEYWORD:::
NAME:setType  
		NAME:setType
		IGNORED:
		IGNORED:
KEYWORD:(
METHOD_VARIABLES: short type  
		VARIABLE: short type  
				COMPOSITE: short
						IGNORED:
						TYPE:short
				NAME:type  
						NAME:type
						IGNORED:
						IGNORED:
KEYWORD:)


[ATTRIBUTE_ASSIGNMENT, ASSIGNMENT, LINE_OF_CODE] -------> this -> type   =  type  
KEYWORD:this
KEYWORD:->
NAME:type  
		NAME:type
		IGNORED:
		IGNORED:
COMPOSITE:=  type  
		KEYWORD:=
		EXPRESSION: type  
				COMPOSITE: type  
						IGNORED:
						VARIABLE:type  
								NAME:type
								IGNORED:
								IGNORED:


